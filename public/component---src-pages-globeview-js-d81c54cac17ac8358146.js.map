{"version":3,"sources":["webpack:///component---src-pages-globeview-js-d81c54cac17ac8358146.js","webpack:///./~/d3-geo/build/d3-geo.js","webpack:///./~/topojson-client/dist/topojson-client.js","webpack:///./src/components/Challenges/GlobeChartView/GlobeViewChart.js","webpack:///./src/components/Challenges/GlobeChartView/GloveViewContainer.js","webpack:///./src/components/Challenges/GlobeChartView/MeteorPoint.js","webpack:///./src/components/Challenges/GlobeChartView/MeteorToolTip.js","webpack:///./src/components/Challenges/GlobeChartView/WorldMap.js","webpack:///./src/components/Challenges/GlobeChartView/globe-style.module.css","webpack:///./src/pages/globeview.js"],"names":["webpackJsonp","379","module","exports","__webpack_require__","global","factory","this","d3Array","Adder","reset","add","adder","a","b","x","s","bv","av","t","acos","pi","Math","asin","halfPi","haversin","sin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","type","streamLine","coordinates","closed","coordinate","i","n","length","lineStart","point","lineEnd","streamPolygon","polygonStart","polygonEnd","areaRingStart","areaStream","areaPointFirst","areaRingEnd","areaPoint","lambda00","phi00","lambda","phi","radians","lambda0","cosPhi0","cos","quarterPi","sinPhi0","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","areaRingSum","atan2","spherical","cartesian","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","d","l","sqrt","boundsPoint","ranges","push","range$1","lambda0$1","lambda1","phi0","phi1","linePoint","p","p0","normal","equatorial","inflection","phii","delta","lambda2","sign$$1","lambdai","degrees","antimeridian","abs","angle","boundsLineStart","boundsStream","boundsLineEnd","boundsRingPoint","deltaSum","lambda00$1","phi00$1","boundsRingStart","boundsRingEnd","epsilon","rangeCompare","rangeContains","range$$1","centroidPoint","centroidPointCartesian","y","z","W0","X0","Y0","Z0","centroidLineStart","centroidStream","centroidLinePointFirst","x0","y0","z0","centroidLinePoint","w","W1","X1","Y1","Z1","centroidLineEnd","centroidRingStart","centroidRingPointFirst","centroidRingEnd","centroidRingPoint","lambda00$2","phi00$2","cx","cy","cz","m","X2","Y2","Z2","rotationIdentity","tau","rotateRadians","deltaLambda","deltaPhi","deltaGamma","compose","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","invert","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","circleStream","radius","direction","t0","t1","cosRadius","sinRadius","step","circleRadius","Intersection","points","other","entry","o","e","link","array","validSegment","segment","compareIntersection","clipAntimeridianLine","clean","NaN","sign0","sign1","clipAntimeridianIntersect","cosPhi1","sinLambda0Lambda1","atan","clipAntimeridianInterpolate","from","to","clipRectangle","x1","y1","visible","interpolate","a1","corner","comparePoint","ca","cb","activeStream","polygonInside","winding","polygon","a0","ring","j","b0","b1","bufferStream","segments","startInside","cleanInside","merge","clipRejoin","clipStream","first","v_","x_","y_","x__","y__","v__","rejoin","result","max","clipMin","min","clipMax","clipLine","clipBuffer","lengthLineStart","lengthStream","lengthPointFirst","lengthLineEnd","lambda0$2","sinPhi0$1","cosPhi0$1","lengthPoint","cosDelta","sinDelta","lengthSum","containsGeometry","containsGeometryType","containsPoint","distance","containsLine","ab","ao","ob","containsPolygon","polygonContains","map","ringRadians","pointRadians","pop","graticuleX","dy","range","concat","graticuleY","dx","graticule","lines","ceil","DX","X","DY","Y","filter","precision","outline","slice","reverse","extent","_","arguments","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","areaRingStart$1","areaStream$1","areaPointFirst$1","areaPoint$1","x00","x0$1","y00","y0$1","areaRingSum$1","areaRingEnd$1","boundsPoint$1","x0$2","y0$2","centroidPoint$1","X0$1","Y0$1","Z0$1","centroidLineStart$1","centroidStream$1","centroidPointFirstLine","centroidPointLine","x0$3","y0$3","X1$1","Y1$1","Z1$1","centroidLineEnd$1","centroidRingStart$1","centroidPointFirstRing","centroidRingEnd$1","centroidPointRing","x00$1","y00$1","X2$1","Y2$1","Z2$1","PathContext","context","_context","lengthPointFirst$1","lengthStream$1","lengthPoint$1","x00$2","x0$4","y00$2","y0$4","lengthSum$1","PathString","_string","circle$1","transformer","methods","TransformStream","key","fit","projection","fitBounds","object","clip","clipExtent","scale","translate","geoStream","boundsStream$1","fitExtent","h","fitSize","size","fitWidth","width","fitHeight","height","resampleNone","project","resample$1","delta2","resampleLineTo","c0","c1","depth","d2","c","phi2","x2","y2","dx2","dy2","dz","cosMinDistance","resampleStream","maxDepth","ringStart","ringPoint","ringEnd","a00","b00","c00","transformRotate","rotate","r","projectionMutator","projectAt","projectRotate","projectTransform","recenter","center","cache","cacheStream","theta","preclip","clipAntimeridian","postclip","identity","projectResample","resample","transformRadians","undefined","clipAngle","clipCircle","apply","conicProjection","parallels","cylindricalEqualAreaRaw","forward","conicEqualAreaRaw","r0","sy0","r0y","sign","multiplex","streams","sphere","azimuthalRaw","azimuthalInvert","sc","cc","mercatorRaw","log","tan","mercatorProjection","reclip","tany","conicConformalRaw","f","pow","cy0","fy","equirectangularRaw","conicEquidistantRaw","gy","g","nx","gnomonicRaw","scaleTranslate","kx","ky","tx","ty","naturalEarth1Raw","phi4","orthographicRaw","stereographicRaw","transverseMercatorRaw","prototype","constructor","temp","valueOf","epsilon2","PI","exp","streamObjectType","Feature","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","geometries","areaSum","areaRing","area","bounds","feature","merged","deltaMax","Infinity","sort","centroid","constant","circle","line","shift","pointEqual","subject","forEach","p1","start","current","isSubject","sum","point0","sinPhi1","point1","absDelta","arc","intersection","phiArc","pointVisible","sink","pointLine","pointRing","ringSink","ringSegments","ringBuffer","polygonStarted","cr","v0","v00","point2","smallRadius","code","intersect","notHemisphere","two","pa","pb","n1","n2","n2n2","n1n2","determinant","c2","n1xn2","A","B","uu","t2","q","polar","meridian","q1","ax","ay","bx","by","containsObjectType","contains","cy1","sy1","kx0","ky0","kx1","ky1","areaSum$1","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","_circle","join","index","path","contextStream","projectionStream","measure","transform","conicEqualArea","albers","albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","azimuthalEquidistant","mercator","conicConformal","equirectangular","conicEquidistant","gnomonic","identity$1","sx","sy","transform$$1","reflectX","reflectY","naturalEarth1","orthographic","stereographic","transverseMercator","geoArea","geoBounds","geoCentroid","geoCircle","geoClipAntimeridian","geoClipCircle","geoClipExtent","geoClipRectangle","geoContains","geoDistance","geoGraticule","geoGraticule10","geoInterpolate","geoLength","geoPath","geoAlbers","geoAlbersUsa","geoAzimuthalEqualArea","geoAzimuthalEqualAreaRaw","geoAzimuthalEquidistant","geoAzimuthalEquidistantRaw","geoConicConformal","geoConicConformalRaw","geoConicEqualArea","geoConicEqualAreaRaw","geoConicEquidistant","geoConicEquidistantRaw","geoEquirectangular","geoEquirectangularRaw","geoGnomonic","geoGnomonicRaw","geoIdentity","geoProjection","geoProjectionMutator","geoMercator","geoMercatorRaw","geoNaturalEarth1","geoNaturalEarth1Raw","geoOrthographic","geoOrthographicRaw","geoStereographic","geoStereographicRaw","geoTransverseMercator","geoTransverseMercatorRaw","geoRotation","geoTransform","Object","defineProperty","value","555","feature$1","topology","id","bbox","properties","arcs","transformPoint","meshArcs","object$$1","extractArcs","Array","stitch","extract0","geomsByArc","geom","extract1","extract2","extract3","geoms","planarRingArea","mergeArcs","objects","extract","polygonsByArc","polygons","groups","group","neighbors","ki","input","output","bboxPoint","bboxGeometry","ends","dp","flush","fragmentByEnd","fragmentByStart","end","stitchedArcs","fragments","emptyIndex","fg","unshift","gf","mesh","bisect","lo","hi","mid","indexesByArc","geometryType","indexes","ij","ik","splice","untransform","round","quantize","quantizePoint","quantizeGeometry","quantizeArc","Error","box","floor","inputs","outputs","390","305","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","enumerable","writable","configurable","setPrototypeOf","__proto__","_react","_react2","_propTypes","_WorldMap","_WorldMap2","GlobeViewChart","_Component","_temp","_this","_ret","_len","args","_key","showToolTipInfo","showToolTip","props","hideToolTipInfo","hideToolTip","render","_props","globeData","meteorsInfo","svgDimensions","createElement","viewBox","world","meteorfall","pointEnter","pointExit","Component","propTypes","306","_topojsonClient","_GlobeViewChart","_GlobeViewChart2","_MeteorToolTip","_MeteorToolTip2","_Utilities","_Utilities2","_globeStyleModule","GlobeViewContainer","activateToolTip","setState","isToolTipActive","meteorInfo","disableToolTip","state","isLoading","isError","meteors","globeMap","componentDidMount","_this2","setTimeout","storedMap","JSON","parse","getStorageData","meteorsData","prevState","countries","fetchData","fetchDataMeteor","_this3","fetch","then","response","json","setStorageData","catch","err","console","stringify","_this4","_state","className","style","globeTitle","containerGlobe","data","307","_propTypes2","MeteorPoint","_PureComponent","calculateRadius","onEnter","_this$props","meteorPointEnter","mass","rectangleLat","rectangleLong","name","meteorname","meteorclass","dateofhit","datefell","meteormass","latitude","longitude","onExit","meteorPointExit","circleId","fill","fillOpacity","stroke","onMouseOver","onMouseOut","PureComponent","shape","string","number","func","308","showMeteorInfo","showMeteorData","MeteorToolTip","_ref","309","_d3Geo","_MeteorPoint","_MeteorPoint2","WorldMap","onPointHover","onPointLeave","_props2","parsedWorld","strokeWidth","recclass","year","parseInt","Number","reclong","reclat","389","tooltipText","329","_GloveViewContainer","_GloveViewContainer2","GlobeGraphPage"],"mappings":"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","file":"component---src-pages-globeview-js-d81c54cac17ac8358146.js","sourcesContent":["webpackJsonp([234182462816062],{\n\n/***/ 379:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-geo/ Version 1.9.1. Copyright 2017 Mike Bostock.\n\t(function (global, factory) {\n\t\t true ? factory(exports, __webpack_require__(123)) :\n\t\ttypeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\n\t\t(factory((global.d3 = global.d3 || {}),global.d3));\n\t}(this, (function (exports,d3Array) { 'use strict';\n\t\n\t// Adds floating point numbers with twice the normal precision.\n\t// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n\t// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n\t// 305–363 (1997).\n\t// Code adapted from GeographicLib by Charles F. F. Karney,\n\t// http://geographiclib.sourceforge.net/\n\t\n\tvar adder = function() {\n\t  return new Adder;\n\t};\n\t\n\tfunction Adder() {\n\t  this.reset();\n\t}\n\t\n\tAdder.prototype = {\n\t  constructor: Adder,\n\t  reset: function() {\n\t    this.s = // rounded value\n\t    this.t = 0; // exact error\n\t  },\n\t  add: function(y) {\n\t    add(temp, y, this.t);\n\t    add(this, temp.s, this.s);\n\t    if (this.s) this.t += temp.t;\n\t    else this.s = temp.t;\n\t  },\n\t  valueOf: function() {\n\t    return this.s;\n\t  }\n\t};\n\t\n\tvar temp = new Adder;\n\t\n\tfunction add(adder, a, b) {\n\t  var x = adder.s = a + b,\n\t      bv = x - a,\n\t      av = x - bv;\n\t  adder.t = (a - av) + (b - bv);\n\t}\n\t\n\tvar epsilon = 1e-6;\n\tvar epsilon2 = 1e-12;\n\tvar pi = Math.PI;\n\tvar halfPi = pi / 2;\n\tvar quarterPi = pi / 4;\n\tvar tau = pi * 2;\n\t\n\tvar degrees = 180 / pi;\n\tvar radians = pi / 180;\n\t\n\tvar abs = Math.abs;\n\tvar atan = Math.atan;\n\tvar atan2 = Math.atan2;\n\tvar cos = Math.cos;\n\tvar ceil = Math.ceil;\n\tvar exp = Math.exp;\n\t\n\tvar log = Math.log;\n\tvar pow = Math.pow;\n\tvar sin = Math.sin;\n\tvar sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\n\tvar sqrt = Math.sqrt;\n\tvar tan = Math.tan;\n\t\n\tfunction acos(x) {\n\t  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n\t}\n\t\n\tfunction asin(x) {\n\t  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n\t}\n\t\n\tfunction haversin(x) {\n\t  return (x = sin(x / 2)) * x;\n\t}\n\t\n\tfunction noop() {}\n\t\n\tfunction streamGeometry(geometry, stream) {\n\t  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n\t    streamGeometryType[geometry.type](geometry, stream);\n\t  }\n\t}\n\t\n\tvar streamObjectType = {\n\t  Feature: function(object, stream) {\n\t    streamGeometry(object.geometry, stream);\n\t  },\n\t  FeatureCollection: function(object, stream) {\n\t    var features = object.features, i = -1, n = features.length;\n\t    while (++i < n) streamGeometry(features[i].geometry, stream);\n\t  }\n\t};\n\t\n\tvar streamGeometryType = {\n\t  Sphere: function(object, stream) {\n\t    stream.sphere();\n\t  },\n\t  Point: function(object, stream) {\n\t    object = object.coordinates;\n\t    stream.point(object[0], object[1], object[2]);\n\t  },\n\t  MultiPoint: function(object, stream) {\n\t    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n\t  },\n\t  LineString: function(object, stream) {\n\t    streamLine(object.coordinates, stream, 0);\n\t  },\n\t  MultiLineString: function(object, stream) {\n\t    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t    while (++i < n) streamLine(coordinates[i], stream, 0);\n\t  },\n\t  Polygon: function(object, stream) {\n\t    streamPolygon(object.coordinates, stream);\n\t  },\n\t  MultiPolygon: function(object, stream) {\n\t    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t    while (++i < n) streamPolygon(coordinates[i], stream);\n\t  },\n\t  GeometryCollection: function(object, stream) {\n\t    var geometries = object.geometries, i = -1, n = geometries.length;\n\t    while (++i < n) streamGeometry(geometries[i], stream);\n\t  }\n\t};\n\t\n\tfunction streamLine(coordinates, stream, closed) {\n\t  var i = -1, n = coordinates.length - closed, coordinate;\n\t  stream.lineStart();\n\t  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n\t  stream.lineEnd();\n\t}\n\t\n\tfunction streamPolygon(coordinates, stream) {\n\t  var i = -1, n = coordinates.length;\n\t  stream.polygonStart();\n\t  while (++i < n) streamLine(coordinates[i], stream, 1);\n\t  stream.polygonEnd();\n\t}\n\t\n\tvar geoStream = function(object, stream) {\n\t  if (object && streamObjectType.hasOwnProperty(object.type)) {\n\t    streamObjectType[object.type](object, stream);\n\t  } else {\n\t    streamGeometry(object, stream);\n\t  }\n\t};\n\t\n\tvar areaRingSum = adder();\n\t\n\tvar areaSum = adder();\n\tvar lambda00;\n\tvar phi00;\n\tvar lambda0;\n\tvar cosPhi0;\n\tvar sinPhi0;\n\t\n\tvar areaStream = {\n\t  point: noop,\n\t  lineStart: noop,\n\t  lineEnd: noop,\n\t  polygonStart: function() {\n\t    areaRingSum.reset();\n\t    areaStream.lineStart = areaRingStart;\n\t    areaStream.lineEnd = areaRingEnd;\n\t  },\n\t  polygonEnd: function() {\n\t    var areaRing = +areaRingSum;\n\t    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n\t    this.lineStart = this.lineEnd = this.point = noop;\n\t  },\n\t  sphere: function() {\n\t    areaSum.add(tau);\n\t  }\n\t};\n\t\n\tfunction areaRingStart() {\n\t  areaStream.point = areaPointFirst;\n\t}\n\t\n\tfunction areaRingEnd() {\n\t  areaPoint(lambda00, phi00);\n\t}\n\t\n\tfunction areaPointFirst(lambda, phi) {\n\t  areaStream.point = areaPoint;\n\t  lambda00 = lambda, phi00 = phi;\n\t  lambda *= radians, phi *= radians;\n\t  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n\t}\n\t\n\tfunction areaPoint(lambda, phi) {\n\t  lambda *= radians, phi *= radians;\n\t  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\t\n\t  // Spherical excess E for a spherical triangle with vertices: south pole,\n\t  // previous point, current point.  Uses a formula derived from Cagnoli’s\n\t  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n\t  var dLambda = lambda - lambda0,\n\t      sdLambda = dLambda >= 0 ? 1 : -1,\n\t      adLambda = sdLambda * dLambda,\n\t      cosPhi = cos(phi),\n\t      sinPhi = sin(phi),\n\t      k = sinPhi0 * sinPhi,\n\t      u = cosPhi0 * cosPhi + k * cos(adLambda),\n\t      v = k * sdLambda * sin(adLambda);\n\t  areaRingSum.add(atan2(v, u));\n\t\n\t  // Advance the previous points.\n\t  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n\t}\n\t\n\tvar area = function(object) {\n\t  areaSum.reset();\n\t  geoStream(object, areaStream);\n\t  return areaSum * 2;\n\t};\n\t\n\tfunction spherical(cartesian) {\n\t  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n\t}\n\t\n\tfunction cartesian(spherical) {\n\t  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n\t  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n\t}\n\t\n\tfunction cartesianDot(a, b) {\n\t  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\t}\n\t\n\tfunction cartesianCross(a, b) {\n\t  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n\t}\n\t\n\t// TODO return a\n\tfunction cartesianAddInPlace(a, b) {\n\t  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n\t}\n\t\n\tfunction cartesianScale(vector, k) {\n\t  return [vector[0] * k, vector[1] * k, vector[2] * k];\n\t}\n\t\n\t// TODO return d\n\tfunction cartesianNormalizeInPlace(d) {\n\t  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n\t  d[0] /= l, d[1] /= l, d[2] /= l;\n\t}\n\t\n\tvar lambda0$1;\n\tvar phi0;\n\tvar lambda1;\n\tvar phi1;\n\tvar lambda2;\n\tvar lambda00$1;\n\tvar phi00$1;\n\tvar p0;\n\tvar deltaSum = adder();\n\tvar ranges;\n\tvar range$1;\n\t\n\tvar boundsStream = {\n\t  point: boundsPoint,\n\t  lineStart: boundsLineStart,\n\t  lineEnd: boundsLineEnd,\n\t  polygonStart: function() {\n\t    boundsStream.point = boundsRingPoint;\n\t    boundsStream.lineStart = boundsRingStart;\n\t    boundsStream.lineEnd = boundsRingEnd;\n\t    deltaSum.reset();\n\t    areaStream.polygonStart();\n\t  },\n\t  polygonEnd: function() {\n\t    areaStream.polygonEnd();\n\t    boundsStream.point = boundsPoint;\n\t    boundsStream.lineStart = boundsLineStart;\n\t    boundsStream.lineEnd = boundsLineEnd;\n\t    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n\t    else if (deltaSum > epsilon) phi1 = 90;\n\t    else if (deltaSum < -epsilon) phi0 = -90;\n\t    range$1[0] = lambda0$1, range$1[1] = lambda1;\n\t  }\n\t};\n\t\n\tfunction boundsPoint(lambda, phi) {\n\t  ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n\t  if (phi < phi0) phi0 = phi;\n\t  if (phi > phi1) phi1 = phi;\n\t}\n\t\n\tfunction linePoint(lambda, phi) {\n\t  var p = cartesian([lambda * radians, phi * radians]);\n\t  if (p0) {\n\t    var normal = cartesianCross(p0, p),\n\t        equatorial = [normal[1], -normal[0], 0],\n\t        inflection = cartesianCross(equatorial, normal);\n\t    cartesianNormalizeInPlace(inflection);\n\t    inflection = spherical(inflection);\n\t    var delta = lambda - lambda2,\n\t        sign$$1 = delta > 0 ? 1 : -1,\n\t        lambdai = inflection[0] * degrees * sign$$1,\n\t        phii,\n\t        antimeridian = abs(delta) > 180;\n\t    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\n\t      phii = inflection[1] * degrees;\n\t      if (phii > phi1) phi1 = phii;\n\t    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\n\t      phii = -inflection[1] * degrees;\n\t      if (phii < phi0) phi0 = phii;\n\t    } else {\n\t      if (phi < phi0) phi0 = phi;\n\t      if (phi > phi1) phi1 = phi;\n\t    }\n\t    if (antimeridian) {\n\t      if (lambda < lambda2) {\n\t        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n\t      } else {\n\t        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n\t      }\n\t    } else {\n\t      if (lambda1 >= lambda0$1) {\n\t        if (lambda < lambda0$1) lambda0$1 = lambda;\n\t        if (lambda > lambda1) lambda1 = lambda;\n\t      } else {\n\t        if (lambda > lambda2) {\n\t          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n\t        } else {\n\t          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n\t        }\n\t      }\n\t    }\n\t  } else {\n\t    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n\t  }\n\t  if (phi < phi0) phi0 = phi;\n\t  if (phi > phi1) phi1 = phi;\n\t  p0 = p, lambda2 = lambda;\n\t}\n\t\n\tfunction boundsLineStart() {\n\t  boundsStream.point = linePoint;\n\t}\n\t\n\tfunction boundsLineEnd() {\n\t  range$1[0] = lambda0$1, range$1[1] = lambda1;\n\t  boundsStream.point = boundsPoint;\n\t  p0 = null;\n\t}\n\t\n\tfunction boundsRingPoint(lambda, phi) {\n\t  if (p0) {\n\t    var delta = lambda - lambda2;\n\t    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n\t  } else {\n\t    lambda00$1 = lambda, phi00$1 = phi;\n\t  }\n\t  areaStream.point(lambda, phi);\n\t  linePoint(lambda, phi);\n\t}\n\t\n\tfunction boundsRingStart() {\n\t  areaStream.lineStart();\n\t}\n\t\n\tfunction boundsRingEnd() {\n\t  boundsRingPoint(lambda00$1, phi00$1);\n\t  areaStream.lineEnd();\n\t  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);\n\t  range$1[0] = lambda0$1, range$1[1] = lambda1;\n\t  p0 = null;\n\t}\n\t\n\t// Finds the left-right distance between two longitudes.\n\t// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n\t// the distance between ±180° to be 360°.\n\tfunction angle(lambda0, lambda1) {\n\t  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n\t}\n\t\n\tfunction rangeCompare(a, b) {\n\t  return a[0] - b[0];\n\t}\n\t\n\tfunction rangeContains(range$$1, x) {\n\t  return range$$1[0] <= range$$1[1] ? range$$1[0] <= x && x <= range$$1[1] : x < range$$1[0] || range$$1[1] < x;\n\t}\n\t\n\tvar bounds = function(feature) {\n\t  var i, n, a, b, merged, deltaMax, delta;\n\t\n\t  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n\t  ranges = [];\n\t  geoStream(feature, boundsStream);\n\t\n\t  // First, sort ranges by their minimum longitudes.\n\t  if (n = ranges.length) {\n\t    ranges.sort(rangeCompare);\n\t\n\t    // Then, merge any ranges that overlap.\n\t    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n\t      b = ranges[i];\n\t      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n\t        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n\t        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n\t      } else {\n\t        merged.push(a = b);\n\t      }\n\t    }\n\t\n\t    // Finally, find the largest gap between the merged ranges.\n\t    // The final bounding box will be the inverse of this gap.\n\t    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n\t      b = merged[i];\n\t      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n\t    }\n\t  }\n\t\n\t  ranges = range$1 = null;\n\t\n\t  return lambda0$1 === Infinity || phi0 === Infinity\n\t      ? [[NaN, NaN], [NaN, NaN]]\n\t      : [[lambda0$1, phi0], [lambda1, phi1]];\n\t};\n\t\n\tvar W0;\n\tvar W1;\n\tvar X0;\n\tvar Y0;\n\tvar Z0;\n\tvar X1;\n\tvar Y1;\n\tvar Z1;\n\tvar X2;\n\tvar Y2;\n\tvar Z2;\n\tvar lambda00$2;\n\tvar phi00$2;\n\tvar x0;\n\tvar y0;\n\tvar z0; // previous point\n\t\n\tvar centroidStream = {\n\t  sphere: noop,\n\t  point: centroidPoint,\n\t  lineStart: centroidLineStart,\n\t  lineEnd: centroidLineEnd,\n\t  polygonStart: function() {\n\t    centroidStream.lineStart = centroidRingStart;\n\t    centroidStream.lineEnd = centroidRingEnd;\n\t  },\n\t  polygonEnd: function() {\n\t    centroidStream.lineStart = centroidLineStart;\n\t    centroidStream.lineEnd = centroidLineEnd;\n\t  }\n\t};\n\t\n\t// Arithmetic mean of Cartesian vectors.\n\tfunction centroidPoint(lambda, phi) {\n\t  lambda *= radians, phi *= radians;\n\t  var cosPhi = cos(phi);\n\t  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n\t}\n\t\n\tfunction centroidPointCartesian(x, y, z) {\n\t  ++W0;\n\t  X0 += (x - X0) / W0;\n\t  Y0 += (y - Y0) / W0;\n\t  Z0 += (z - Z0) / W0;\n\t}\n\t\n\tfunction centroidLineStart() {\n\t  centroidStream.point = centroidLinePointFirst;\n\t}\n\t\n\tfunction centroidLinePointFirst(lambda, phi) {\n\t  lambda *= radians, phi *= radians;\n\t  var cosPhi = cos(phi);\n\t  x0 = cosPhi * cos(lambda);\n\t  y0 = cosPhi * sin(lambda);\n\t  z0 = sin(phi);\n\t  centroidStream.point = centroidLinePoint;\n\t  centroidPointCartesian(x0, y0, z0);\n\t}\n\t\n\tfunction centroidLinePoint(lambda, phi) {\n\t  lambda *= radians, phi *= radians;\n\t  var cosPhi = cos(phi),\n\t      x = cosPhi * cos(lambda),\n\t      y = cosPhi * sin(lambda),\n\t      z = sin(phi),\n\t      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n\t  W1 += w;\n\t  X1 += w * (x0 + (x0 = x));\n\t  Y1 += w * (y0 + (y0 = y));\n\t  Z1 += w * (z0 + (z0 = z));\n\t  centroidPointCartesian(x0, y0, z0);\n\t}\n\t\n\tfunction centroidLineEnd() {\n\t  centroidStream.point = centroidPoint;\n\t}\n\t\n\t// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n\t// J. Applied Mechanics 42, 239 (1975).\n\tfunction centroidRingStart() {\n\t  centroidStream.point = centroidRingPointFirst;\n\t}\n\t\n\tfunction centroidRingEnd() {\n\t  centroidRingPoint(lambda00$2, phi00$2);\n\t  centroidStream.point = centroidPoint;\n\t}\n\t\n\tfunction centroidRingPointFirst(lambda, phi) {\n\t  lambda00$2 = lambda, phi00$2 = phi;\n\t  lambda *= radians, phi *= radians;\n\t  centroidStream.point = centroidRingPoint;\n\t  var cosPhi = cos(phi);\n\t  x0 = cosPhi * cos(lambda);\n\t  y0 = cosPhi * sin(lambda);\n\t  z0 = sin(phi);\n\t  centroidPointCartesian(x0, y0, z0);\n\t}\n\t\n\tfunction centroidRingPoint(lambda, phi) {\n\t  lambda *= radians, phi *= radians;\n\t  var cosPhi = cos(phi),\n\t      x = cosPhi * cos(lambda),\n\t      y = cosPhi * sin(lambda),\n\t      z = sin(phi),\n\t      cx = y0 * z - z0 * y,\n\t      cy = z0 * x - x0 * z,\n\t      cz = x0 * y - y0 * x,\n\t      m = sqrt(cx * cx + cy * cy + cz * cz),\n\t      w = asin(m), // line weight = angle\n\t      v = m && -w / m; // area weight multiplier\n\t  X2 += v * cx;\n\t  Y2 += v * cy;\n\t  Z2 += v * cz;\n\t  W1 += w;\n\t  X1 += w * (x0 + (x0 = x));\n\t  Y1 += w * (y0 + (y0 = y));\n\t  Z1 += w * (z0 + (z0 = z));\n\t  centroidPointCartesian(x0, y0, z0);\n\t}\n\t\n\tvar centroid = function(object) {\n\t  W0 = W1 =\n\t  X0 = Y0 = Z0 =\n\t  X1 = Y1 = Z1 =\n\t  X2 = Y2 = Z2 = 0;\n\t  geoStream(object, centroidStream);\n\t\n\t  var x = X2,\n\t      y = Y2,\n\t      z = Z2,\n\t      m = x * x + y * y + z * z;\n\t\n\t  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n\t  if (m < epsilon2) {\n\t    x = X1, y = Y1, z = Z1;\n\t    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n\t    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n\t    m = x * x + y * y + z * z;\n\t    // If the feature still has an undefined ccentroid, then return.\n\t    if (m < epsilon2) return [NaN, NaN];\n\t  }\n\t\n\t  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n\t};\n\t\n\tvar constant = function(x) {\n\t  return function() {\n\t    return x;\n\t  };\n\t};\n\t\n\tvar compose = function(a, b) {\n\t\n\t  function compose(x, y) {\n\t    return x = a(x, y), b(x[0], x[1]);\n\t  }\n\t\n\t  if (a.invert && b.invert) compose.invert = function(x, y) {\n\t    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n\t  };\n\t\n\t  return compose;\n\t};\n\t\n\tfunction rotationIdentity(lambda, phi) {\n\t  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n\t}\n\t\n\trotationIdentity.invert = rotationIdentity;\n\t\n\tfunction rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n\t  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n\t    : rotationLambda(deltaLambda))\n\t    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n\t    : rotationIdentity);\n\t}\n\t\n\tfunction forwardRotationLambda(deltaLambda) {\n\t  return function(lambda, phi) {\n\t    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n\t  };\n\t}\n\t\n\tfunction rotationLambda(deltaLambda) {\n\t  var rotation = forwardRotationLambda(deltaLambda);\n\t  rotation.invert = forwardRotationLambda(-deltaLambda);\n\t  return rotation;\n\t}\n\t\n\tfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n\t  var cosDeltaPhi = cos(deltaPhi),\n\t      sinDeltaPhi = sin(deltaPhi),\n\t      cosDeltaGamma = cos(deltaGamma),\n\t      sinDeltaGamma = sin(deltaGamma);\n\t\n\t  function rotation(lambda, phi) {\n\t    var cosPhi = cos(phi),\n\t        x = cos(lambda) * cosPhi,\n\t        y = sin(lambda) * cosPhi,\n\t        z = sin(phi),\n\t        k = z * cosDeltaPhi + x * sinDeltaPhi;\n\t    return [\n\t      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n\t      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n\t    ];\n\t  }\n\t\n\t  rotation.invert = function(lambda, phi) {\n\t    var cosPhi = cos(phi),\n\t        x = cos(lambda) * cosPhi,\n\t        y = sin(lambda) * cosPhi,\n\t        z = sin(phi),\n\t        k = z * cosDeltaGamma - y * sinDeltaGamma;\n\t    return [\n\t      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n\t      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n\t    ];\n\t  };\n\t\n\t  return rotation;\n\t}\n\t\n\tvar rotation = function(rotate) {\n\t  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\t\n\t  function forward(coordinates) {\n\t    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n\t    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n\t  }\n\t\n\t  forward.invert = function(coordinates) {\n\t    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n\t    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n\t  };\n\t\n\t  return forward;\n\t};\n\t\n\t// Generates a circle centered at [0°, 0°], with a given radius and precision.\n\tfunction circleStream(stream, radius, delta, direction, t0, t1) {\n\t  if (!delta) return;\n\t  var cosRadius = cos(radius),\n\t      sinRadius = sin(radius),\n\t      step = direction * delta;\n\t  if (t0 == null) {\n\t    t0 = radius + direction * tau;\n\t    t1 = radius - step / 2;\n\t  } else {\n\t    t0 = circleRadius(cosRadius, t0);\n\t    t1 = circleRadius(cosRadius, t1);\n\t    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n\t  }\n\t  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n\t    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n\t    stream.point(point[0], point[1]);\n\t  }\n\t}\n\t\n\t// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n\tfunction circleRadius(cosRadius, point) {\n\t  point = cartesian(point), point[0] -= cosRadius;\n\t  cartesianNormalizeInPlace(point);\n\t  var radius = acos(-point[1]);\n\t  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n\t}\n\t\n\tvar circle = function() {\n\t  var center = constant([0, 0]),\n\t      radius = constant(90),\n\t      precision = constant(6),\n\t      ring,\n\t      rotate,\n\t      stream = {point: point};\n\t\n\t  function point(x, y) {\n\t    ring.push(x = rotate(x, y));\n\t    x[0] *= degrees, x[1] *= degrees;\n\t  }\n\t\n\t  function circle() {\n\t    var c = center.apply(this, arguments),\n\t        r = radius.apply(this, arguments) * radians,\n\t        p = precision.apply(this, arguments) * radians;\n\t    ring = [];\n\t    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n\t    circleStream(stream, r, p, 1);\n\t    c = {type: \"Polygon\", coordinates: [ring]};\n\t    ring = rotate = null;\n\t    return c;\n\t  }\n\t\n\t  circle.center = function(_) {\n\t    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n\t  };\n\t\n\t  circle.radius = function(_) {\n\t    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n\t  };\n\t\n\t  circle.precision = function(_) {\n\t    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n\t  };\n\t\n\t  return circle;\n\t};\n\t\n\tvar clipBuffer = function() {\n\t  var lines = [],\n\t      line;\n\t  return {\n\t    point: function(x, y) {\n\t      line.push([x, y]);\n\t    },\n\t    lineStart: function() {\n\t      lines.push(line = []);\n\t    },\n\t    lineEnd: noop,\n\t    rejoin: function() {\n\t      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n\t    },\n\t    result: function() {\n\t      var result = lines;\n\t      lines = [];\n\t      line = null;\n\t      return result;\n\t    }\n\t  };\n\t};\n\t\n\tvar pointEqual = function(a, b) {\n\t  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n\t};\n\t\n\tfunction Intersection(point, points, other, entry) {\n\t  this.x = point;\n\t  this.z = points;\n\t  this.o = other; // another intersection\n\t  this.e = entry; // is an entry?\n\t  this.v = false; // visited\n\t  this.n = this.p = null; // next & previous\n\t}\n\t\n\t// A generalized polygon clipping algorithm: given a polygon that has been cut\n\t// into its visible line segments, and rejoins the segments by interpolating\n\t// along the clip edge.\n\tvar clipRejoin = function(segments, compareIntersection, startInside, interpolate, stream) {\n\t  var subject = [],\n\t      clip = [],\n\t      i,\n\t      n;\n\t\n\t  segments.forEach(function(segment) {\n\t    if ((n = segment.length - 1) <= 0) return;\n\t    var n, p0 = segment[0], p1 = segment[n], x;\n\t\n\t    // If the first and last points of a segment are coincident, then treat as a\n\t    // closed ring. TODO if all rings are closed, then the winding order of the\n\t    // exterior ring should be checked.\n\t    if (pointEqual(p0, p1)) {\n\t      stream.lineStart();\n\t      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n\t      stream.lineEnd();\n\t      return;\n\t    }\n\t\n\t    subject.push(x = new Intersection(p0, segment, null, true));\n\t    clip.push(x.o = new Intersection(p0, null, x, false));\n\t    subject.push(x = new Intersection(p1, segment, null, false));\n\t    clip.push(x.o = new Intersection(p1, null, x, true));\n\t  });\n\t\n\t  if (!subject.length) return;\n\t\n\t  clip.sort(compareIntersection);\n\t  link(subject);\n\t  link(clip);\n\t\n\t  for (i = 0, n = clip.length; i < n; ++i) {\n\t    clip[i].e = startInside = !startInside;\n\t  }\n\t\n\t  var start = subject[0],\n\t      points,\n\t      point;\n\t\n\t  while (1) {\n\t    // Find first unvisited intersection.\n\t    var current = start,\n\t        isSubject = true;\n\t    while (current.v) if ((current = current.n) === start) return;\n\t    points = current.z;\n\t    stream.lineStart();\n\t    do {\n\t      current.v = current.o.v = true;\n\t      if (current.e) {\n\t        if (isSubject) {\n\t          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n\t        } else {\n\t          interpolate(current.x, current.n.x, 1, stream);\n\t        }\n\t        current = current.n;\n\t      } else {\n\t        if (isSubject) {\n\t          points = current.p.z;\n\t          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n\t        } else {\n\t          interpolate(current.x, current.p.x, -1, stream);\n\t        }\n\t        current = current.p;\n\t      }\n\t      current = current.o;\n\t      points = current.z;\n\t      isSubject = !isSubject;\n\t    } while (!current.v);\n\t    stream.lineEnd();\n\t  }\n\t};\n\t\n\tfunction link(array) {\n\t  if (!(n = array.length)) return;\n\t  var n,\n\t      i = 0,\n\t      a = array[0],\n\t      b;\n\t  while (++i < n) {\n\t    a.n = b = array[i];\n\t    b.p = a;\n\t    a = b;\n\t  }\n\t  a.n = b = array[0];\n\t  b.p = a;\n\t}\n\t\n\tvar sum = adder();\n\t\n\tvar polygonContains = function(polygon, point) {\n\t  var lambda = point[0],\n\t      phi = point[1],\n\t      normal = [sin(lambda), -cos(lambda), 0],\n\t      angle = 0,\n\t      winding = 0;\n\t\n\t  sum.reset();\n\t\n\t  for (var i = 0, n = polygon.length; i < n; ++i) {\n\t    if (!(m = (ring = polygon[i]).length)) continue;\n\t    var ring,\n\t        m,\n\t        point0 = ring[m - 1],\n\t        lambda0 = point0[0],\n\t        phi0 = point0[1] / 2 + quarterPi,\n\t        sinPhi0 = sin(phi0),\n\t        cosPhi0 = cos(phi0);\n\t\n\t    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n\t      var point1 = ring[j],\n\t          lambda1 = point1[0],\n\t          phi1 = point1[1] / 2 + quarterPi,\n\t          sinPhi1 = sin(phi1),\n\t          cosPhi1 = cos(phi1),\n\t          delta = lambda1 - lambda0,\n\t          sign$$1 = delta >= 0 ? 1 : -1,\n\t          absDelta = sign$$1 * delta,\n\t          antimeridian = absDelta > pi,\n\t          k = sinPhi0 * sinPhi1;\n\t\n\t      sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n\t      angle += antimeridian ? delta + sign$$1 * tau : delta;\n\t\n\t      // Are the longitudes either side of the point’s meridian (lambda),\n\t      // and are the latitudes smaller than the parallel (phi)?\n\t      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n\t        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n\t        cartesianNormalizeInPlace(arc);\n\t        var intersection = cartesianCross(normal, arc);\n\t        cartesianNormalizeInPlace(intersection);\n\t        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n\t        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n\t          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  // First, determine whether the South pole is inside or outside:\n\t  //\n\t  // It is inside if:\n\t  // * the polygon winds around it in a clockwise direction.\n\t  // * the polygon does not (cumulatively) wind around it, but has a negative\n\t  //   (counter-clockwise) area.\n\t  //\n\t  // Second, count the (signed) number of times a segment crosses a lambda\n\t  // from the point to the South pole.  If it is zero, then the point is the\n\t  // same side as the South pole.\n\t\n\t  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n\t};\n\t\n\tvar clip = function(pointVisible, clipLine, interpolate, start) {\n\t  return function(sink) {\n\t    var line = clipLine(sink),\n\t        ringBuffer = clipBuffer(),\n\t        ringSink = clipLine(ringBuffer),\n\t        polygonStarted = false,\n\t        polygon,\n\t        segments,\n\t        ring;\n\t\n\t    var clip = {\n\t      point: point,\n\t      lineStart: lineStart,\n\t      lineEnd: lineEnd,\n\t      polygonStart: function() {\n\t        clip.point = pointRing;\n\t        clip.lineStart = ringStart;\n\t        clip.lineEnd = ringEnd;\n\t        segments = [];\n\t        polygon = [];\n\t      },\n\t      polygonEnd: function() {\n\t        clip.point = point;\n\t        clip.lineStart = lineStart;\n\t        clip.lineEnd = lineEnd;\n\t        segments = d3Array.merge(segments);\n\t        var startInside = polygonContains(polygon, start);\n\t        if (segments.length) {\n\t          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n\t          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n\t        } else if (startInside) {\n\t          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n\t          sink.lineStart();\n\t          interpolate(null, null, 1, sink);\n\t          sink.lineEnd();\n\t        }\n\t        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n\t        segments = polygon = null;\n\t      },\n\t      sphere: function() {\n\t        sink.polygonStart();\n\t        sink.lineStart();\n\t        interpolate(null, null, 1, sink);\n\t        sink.lineEnd();\n\t        sink.polygonEnd();\n\t      }\n\t    };\n\t\n\t    function point(lambda, phi) {\n\t      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n\t    }\n\t\n\t    function pointLine(lambda, phi) {\n\t      line.point(lambda, phi);\n\t    }\n\t\n\t    function lineStart() {\n\t      clip.point = pointLine;\n\t      line.lineStart();\n\t    }\n\t\n\t    function lineEnd() {\n\t      clip.point = point;\n\t      line.lineEnd();\n\t    }\n\t\n\t    function pointRing(lambda, phi) {\n\t      ring.push([lambda, phi]);\n\t      ringSink.point(lambda, phi);\n\t    }\n\t\n\t    function ringStart() {\n\t      ringSink.lineStart();\n\t      ring = [];\n\t    }\n\t\n\t    function ringEnd() {\n\t      pointRing(ring[0][0], ring[0][1]);\n\t      ringSink.lineEnd();\n\t\n\t      var clean = ringSink.clean(),\n\t          ringSegments = ringBuffer.result(),\n\t          i, n = ringSegments.length, m,\n\t          segment,\n\t          point;\n\t\n\t      ring.pop();\n\t      polygon.push(ring);\n\t      ring = null;\n\t\n\t      if (!n) return;\n\t\n\t      // No intersections.\n\t      if (clean & 1) {\n\t        segment = ringSegments[0];\n\t        if ((m = segment.length - 1) > 0) {\n\t          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n\t          sink.lineStart();\n\t          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n\t          sink.lineEnd();\n\t        }\n\t        return;\n\t      }\n\t\n\t      // Rejoin connected segments.\n\t      // TODO reuse ringBuffer.rejoin()?\n\t      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\t\n\t      segments.push(ringSegments.filter(validSegment));\n\t    }\n\t\n\t    return clip;\n\t  };\n\t};\n\t\n\tfunction validSegment(segment) {\n\t  return segment.length > 1;\n\t}\n\t\n\t// Intersections are sorted along the clip edge. For both antimeridian cutting\n\t// and circle clipping, the same comparison is used.\n\tfunction compareIntersection(a, b) {\n\t  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n\t       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n\t}\n\t\n\tvar clipAntimeridian = clip(\n\t  function() { return true; },\n\t  clipAntimeridianLine,\n\t  clipAntimeridianInterpolate,\n\t  [-pi, -halfPi]\n\t);\n\t\n\t// Takes a line and cuts into visible segments. Return values: 0 - there were\n\t// intersections or the line was empty; 1 - no intersections; 2 - there were\n\t// intersections, and the first and last segments should be rejoined.\n\tfunction clipAntimeridianLine(stream) {\n\t  var lambda0 = NaN,\n\t      phi0 = NaN,\n\t      sign0 = NaN,\n\t      clean; // no intersections\n\t\n\t  return {\n\t    lineStart: function() {\n\t      stream.lineStart();\n\t      clean = 1;\n\t    },\n\t    point: function(lambda1, phi1) {\n\t      var sign1 = lambda1 > 0 ? pi : -pi,\n\t          delta = abs(lambda1 - lambda0);\n\t      if (abs(delta - pi) < epsilon) { // line crosses a pole\n\t        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n\t        stream.point(sign0, phi0);\n\t        stream.lineEnd();\n\t        stream.lineStart();\n\t        stream.point(sign1, phi0);\n\t        stream.point(lambda1, phi0);\n\t        clean = 0;\n\t      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n\t        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n\t        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n\t        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n\t        stream.point(sign0, phi0);\n\t        stream.lineEnd();\n\t        stream.lineStart();\n\t        stream.point(sign1, phi0);\n\t        clean = 0;\n\t      }\n\t      stream.point(lambda0 = lambda1, phi0 = phi1);\n\t      sign0 = sign1;\n\t    },\n\t    lineEnd: function() {\n\t      stream.lineEnd();\n\t      lambda0 = phi0 = NaN;\n\t    },\n\t    clean: function() {\n\t      return 2 - clean; // if intersections, rejoin first and last segments\n\t    }\n\t  };\n\t}\n\t\n\tfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n\t  var cosPhi0,\n\t      cosPhi1,\n\t      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n\t  return abs(sinLambda0Lambda1) > epsilon\n\t      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n\t          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n\t          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n\t      : (phi0 + phi1) / 2;\n\t}\n\t\n\tfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n\t  var phi;\n\t  if (from == null) {\n\t    phi = direction * halfPi;\n\t    stream.point(-pi, phi);\n\t    stream.point(0, phi);\n\t    stream.point(pi, phi);\n\t    stream.point(pi, 0);\n\t    stream.point(pi, -phi);\n\t    stream.point(0, -phi);\n\t    stream.point(-pi, -phi);\n\t    stream.point(-pi, 0);\n\t    stream.point(-pi, phi);\n\t  } else if (abs(from[0] - to[0]) > epsilon) {\n\t    var lambda = from[0] < to[0] ? pi : -pi;\n\t    phi = direction * lambda / 2;\n\t    stream.point(-lambda, phi);\n\t    stream.point(0, phi);\n\t    stream.point(lambda, phi);\n\t  } else {\n\t    stream.point(to[0], to[1]);\n\t  }\n\t}\n\t\n\tvar clipCircle = function(radius) {\n\t  var cr = cos(radius),\n\t      delta = 6 * radians,\n\t      smallRadius = cr > 0,\n\t      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\t\n\t  function interpolate(from, to, direction, stream) {\n\t    circleStream(stream, radius, delta, direction, from, to);\n\t  }\n\t\n\t  function visible(lambda, phi) {\n\t    return cos(lambda) * cos(phi) > cr;\n\t  }\n\t\n\t  // Takes a line and cuts into visible segments. Return values used for polygon\n\t  // clipping: 0 - there were intersections or the line was empty; 1 - no\n\t  // intersections 2 - there were intersections, and the first and last segments\n\t  // should be rejoined.\n\t  function clipLine(stream) {\n\t    var point0, // previous point\n\t        c0, // code for previous point\n\t        v0, // visibility of previous point\n\t        v00, // visibility of first point\n\t        clean; // no intersections\n\t    return {\n\t      lineStart: function() {\n\t        v00 = v0 = false;\n\t        clean = 1;\n\t      },\n\t      point: function(lambda, phi) {\n\t        var point1 = [lambda, phi],\n\t            point2,\n\t            v = visible(lambda, phi),\n\t            c = smallRadius\n\t              ? v ? 0 : code(lambda, phi)\n\t              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n\t        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n\t        // Handle degeneracies.\n\t        // TODO ignore if not clipping polygons.\n\t        if (v !== v0) {\n\t          point2 = intersect(point0, point1);\n\t          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n\t            point1[0] += epsilon;\n\t            point1[1] += epsilon;\n\t            v = visible(point1[0], point1[1]);\n\t          }\n\t        }\n\t        if (v !== v0) {\n\t          clean = 0;\n\t          if (v) {\n\t            // outside going in\n\t            stream.lineStart();\n\t            point2 = intersect(point1, point0);\n\t            stream.point(point2[0], point2[1]);\n\t          } else {\n\t            // inside going out\n\t            point2 = intersect(point0, point1);\n\t            stream.point(point2[0], point2[1]);\n\t            stream.lineEnd();\n\t          }\n\t          point0 = point2;\n\t        } else if (notHemisphere && point0 && smallRadius ^ v) {\n\t          var t;\n\t          // If the codes for two points are different, or are both zero,\n\t          // and there this segment intersects with the small circle.\n\t          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n\t            clean = 0;\n\t            if (smallRadius) {\n\t              stream.lineStart();\n\t              stream.point(t[0][0], t[0][1]);\n\t              stream.point(t[1][0], t[1][1]);\n\t              stream.lineEnd();\n\t            } else {\n\t              stream.point(t[1][0], t[1][1]);\n\t              stream.lineEnd();\n\t              stream.lineStart();\n\t              stream.point(t[0][0], t[0][1]);\n\t            }\n\t          }\n\t        }\n\t        if (v && (!point0 || !pointEqual(point0, point1))) {\n\t          stream.point(point1[0], point1[1]);\n\t        }\n\t        point0 = point1, v0 = v, c0 = c;\n\t      },\n\t      lineEnd: function() {\n\t        if (v0) stream.lineEnd();\n\t        point0 = null;\n\t      },\n\t      // Rejoin first and last segments if there were intersections and the first\n\t      // and last points were visible.\n\t      clean: function() {\n\t        return clean | ((v00 && v0) << 1);\n\t      }\n\t    };\n\t  }\n\t\n\t  // Intersects the great circle between a and b with the clip circle.\n\t  function intersect(a, b, two) {\n\t    var pa = cartesian(a),\n\t        pb = cartesian(b);\n\t\n\t    // We have two planes, n1.p = d1 and n2.p = d2.\n\t    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n\t    var n1 = [1, 0, 0], // normal\n\t        n2 = cartesianCross(pa, pb),\n\t        n2n2 = cartesianDot(n2, n2),\n\t        n1n2 = n2[0], // cartesianDot(n1, n2),\n\t        determinant = n2n2 - n1n2 * n1n2;\n\t\n\t    // Two polar points.\n\t    if (!determinant) return !two && a;\n\t\n\t    var c1 =  cr * n2n2 / determinant,\n\t        c2 = -cr * n1n2 / determinant,\n\t        n1xn2 = cartesianCross(n1, n2),\n\t        A = cartesianScale(n1, c1),\n\t        B = cartesianScale(n2, c2);\n\t    cartesianAddInPlace(A, B);\n\t\n\t    // Solve |p(t)|^2 = 1.\n\t    var u = n1xn2,\n\t        w = cartesianDot(A, u),\n\t        uu = cartesianDot(u, u),\n\t        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\t\n\t    if (t2 < 0) return;\n\t\n\t    var t = sqrt(t2),\n\t        q = cartesianScale(u, (-w - t) / uu);\n\t    cartesianAddInPlace(q, A);\n\t    q = spherical(q);\n\t\n\t    if (!two) return q;\n\t\n\t    // Two intersection points.\n\t    var lambda0 = a[0],\n\t        lambda1 = b[0],\n\t        phi0 = a[1],\n\t        phi1 = b[1],\n\t        z;\n\t\n\t    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\t\n\t    var delta = lambda1 - lambda0,\n\t        polar = abs(delta - pi) < epsilon,\n\t        meridian = polar || delta < epsilon;\n\t\n\t    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\t\n\t    // Check that the first point is between a and b.\n\t    if (meridian\n\t        ? polar\n\t          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n\t          : phi0 <= q[1] && q[1] <= phi1\n\t        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n\t      var q1 = cartesianScale(u, (-w + t) / uu);\n\t      cartesianAddInPlace(q1, A);\n\t      return [q, spherical(q1)];\n\t    }\n\t  }\n\t\n\t  // Generates a 4-bit vector representing the location of a point relative to\n\t  // the small circle's bounding box.\n\t  function code(lambda, phi) {\n\t    var r = smallRadius ? radius : pi - radius,\n\t        code = 0;\n\t    if (lambda < -r) code |= 1; // left\n\t    else if (lambda > r) code |= 2; // right\n\t    if (phi < -r) code |= 4; // below\n\t    else if (phi > r) code |= 8; // above\n\t    return code;\n\t  }\n\t\n\t  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n\t};\n\t\n\tvar clipLine = function(a, b, x0, y0, x1, y1) {\n\t  var ax = a[0],\n\t      ay = a[1],\n\t      bx = b[0],\n\t      by = b[1],\n\t      t0 = 0,\n\t      t1 = 1,\n\t      dx = bx - ax,\n\t      dy = by - ay,\n\t      r;\n\t\n\t  r = x0 - ax;\n\t  if (!dx && r > 0) return;\n\t  r /= dx;\n\t  if (dx < 0) {\n\t    if (r < t0) return;\n\t    if (r < t1) t1 = r;\n\t  } else if (dx > 0) {\n\t    if (r > t1) return;\n\t    if (r > t0) t0 = r;\n\t  }\n\t\n\t  r = x1 - ax;\n\t  if (!dx && r < 0) return;\n\t  r /= dx;\n\t  if (dx < 0) {\n\t    if (r > t1) return;\n\t    if (r > t0) t0 = r;\n\t  } else if (dx > 0) {\n\t    if (r < t0) return;\n\t    if (r < t1) t1 = r;\n\t  }\n\t\n\t  r = y0 - ay;\n\t  if (!dy && r > 0) return;\n\t  r /= dy;\n\t  if (dy < 0) {\n\t    if (r < t0) return;\n\t    if (r < t1) t1 = r;\n\t  } else if (dy > 0) {\n\t    if (r > t1) return;\n\t    if (r > t0) t0 = r;\n\t  }\n\t\n\t  r = y1 - ay;\n\t  if (!dy && r < 0) return;\n\t  r /= dy;\n\t  if (dy < 0) {\n\t    if (r > t1) return;\n\t    if (r > t0) t0 = r;\n\t  } else if (dy > 0) {\n\t    if (r < t0) return;\n\t    if (r < t1) t1 = r;\n\t  }\n\t\n\t  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n\t  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n\t  return true;\n\t};\n\t\n\tvar clipMax = 1e9;\n\tvar clipMin = -clipMax;\n\t\n\t// TODO Use d3-polygon’s polygonContains here for the ring check?\n\t// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\t\n\tfunction clipRectangle(x0, y0, x1, y1) {\n\t\n\t  function visible(x, y) {\n\t    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n\t  }\n\t\n\t  function interpolate(from, to, direction, stream) {\n\t    var a = 0, a1 = 0;\n\t    if (from == null\n\t        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n\t        || comparePoint(from, to) < 0 ^ direction > 0) {\n\t      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n\t      while ((a = (a + direction + 4) % 4) !== a1);\n\t    } else {\n\t      stream.point(to[0], to[1]);\n\t    }\n\t  }\n\t\n\t  function corner(p, direction) {\n\t    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n\t        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n\t        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n\t        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n\t  }\n\t\n\t  function compareIntersection(a, b) {\n\t    return comparePoint(a.x, b.x);\n\t  }\n\t\n\t  function comparePoint(a, b) {\n\t    var ca = corner(a, 1),\n\t        cb = corner(b, 1);\n\t    return ca !== cb ? ca - cb\n\t        : ca === 0 ? b[1] - a[1]\n\t        : ca === 1 ? a[0] - b[0]\n\t        : ca === 2 ? a[1] - b[1]\n\t        : b[0] - a[0];\n\t  }\n\t\n\t  return function(stream) {\n\t    var activeStream = stream,\n\t        bufferStream = clipBuffer(),\n\t        segments,\n\t        polygon,\n\t        ring,\n\t        x__, y__, v__, // first point\n\t        x_, y_, v_, // previous point\n\t        first,\n\t        clean;\n\t\n\t    var clipStream = {\n\t      point: point,\n\t      lineStart: lineStart,\n\t      lineEnd: lineEnd,\n\t      polygonStart: polygonStart,\n\t      polygonEnd: polygonEnd\n\t    };\n\t\n\t    function point(x, y) {\n\t      if (visible(x, y)) activeStream.point(x, y);\n\t    }\n\t\n\t    function polygonInside() {\n\t      var winding = 0;\n\t\n\t      for (var i = 0, n = polygon.length; i < n; ++i) {\n\t        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n\t          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n\t          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n\t          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n\t        }\n\t      }\n\t\n\t      return winding;\n\t    }\n\t\n\t    // Buffer geometry within a polygon and then clip it en masse.\n\t    function polygonStart() {\n\t      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n\t    }\n\t\n\t    function polygonEnd() {\n\t      var startInside = polygonInside(),\n\t          cleanInside = clean && startInside,\n\t          visible = (segments = d3Array.merge(segments)).length;\n\t      if (cleanInside || visible) {\n\t        stream.polygonStart();\n\t        if (cleanInside) {\n\t          stream.lineStart();\n\t          interpolate(null, null, 1, stream);\n\t          stream.lineEnd();\n\t        }\n\t        if (visible) {\n\t          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n\t        }\n\t        stream.polygonEnd();\n\t      }\n\t      activeStream = stream, segments = polygon = ring = null;\n\t    }\n\t\n\t    function lineStart() {\n\t      clipStream.point = linePoint;\n\t      if (polygon) polygon.push(ring = []);\n\t      first = true;\n\t      v_ = false;\n\t      x_ = y_ = NaN;\n\t    }\n\t\n\t    // TODO rather than special-case polygons, simply handle them separately.\n\t    // Ideally, coincident intersection points should be jittered to avoid\n\t    // clipping issues.\n\t    function lineEnd() {\n\t      if (segments) {\n\t        linePoint(x__, y__);\n\t        if (v__ && v_) bufferStream.rejoin();\n\t        segments.push(bufferStream.result());\n\t      }\n\t      clipStream.point = point;\n\t      if (v_) activeStream.lineEnd();\n\t    }\n\t\n\t    function linePoint(x, y) {\n\t      var v = visible(x, y);\n\t      if (polygon) ring.push([x, y]);\n\t      if (first) {\n\t        x__ = x, y__ = y, v__ = v;\n\t        first = false;\n\t        if (v) {\n\t          activeStream.lineStart();\n\t          activeStream.point(x, y);\n\t        }\n\t      } else {\n\t        if (v && v_) activeStream.point(x, y);\n\t        else {\n\t          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n\t              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n\t          if (clipLine(a, b, x0, y0, x1, y1)) {\n\t            if (!v_) {\n\t              activeStream.lineStart();\n\t              activeStream.point(a[0], a[1]);\n\t            }\n\t            activeStream.point(b[0], b[1]);\n\t            if (!v) activeStream.lineEnd();\n\t            clean = false;\n\t          } else if (v) {\n\t            activeStream.lineStart();\n\t            activeStream.point(x, y);\n\t            clean = false;\n\t          }\n\t        }\n\t      }\n\t      x_ = x, y_ = y, v_ = v;\n\t    }\n\t\n\t    return clipStream;\n\t  };\n\t}\n\t\n\tvar extent = function() {\n\t  var x0 = 0,\n\t      y0 = 0,\n\t      x1 = 960,\n\t      y1 = 500,\n\t      cache,\n\t      cacheStream,\n\t      clip;\n\t\n\t  return clip = {\n\t    stream: function(stream) {\n\t      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n\t    },\n\t    extent: function(_) {\n\t      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n\t    }\n\t  };\n\t};\n\t\n\tvar lengthSum = adder();\n\tvar lambda0$2;\n\tvar sinPhi0$1;\n\tvar cosPhi0$1;\n\t\n\tvar lengthStream = {\n\t  sphere: noop,\n\t  point: noop,\n\t  lineStart: lengthLineStart,\n\t  lineEnd: noop,\n\t  polygonStart: noop,\n\t  polygonEnd: noop\n\t};\n\t\n\tfunction lengthLineStart() {\n\t  lengthStream.point = lengthPointFirst;\n\t  lengthStream.lineEnd = lengthLineEnd;\n\t}\n\t\n\tfunction lengthLineEnd() {\n\t  lengthStream.point = lengthStream.lineEnd = noop;\n\t}\n\t\n\tfunction lengthPointFirst(lambda, phi) {\n\t  lambda *= radians, phi *= radians;\n\t  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);\n\t  lengthStream.point = lengthPoint;\n\t}\n\t\n\tfunction lengthPoint(lambda, phi) {\n\t  lambda *= radians, phi *= radians;\n\t  var sinPhi = sin(phi),\n\t      cosPhi = cos(phi),\n\t      delta = abs(lambda - lambda0$2),\n\t      cosDelta = cos(delta),\n\t      sinDelta = sin(delta),\n\t      x = cosPhi * sinDelta,\n\t      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n\t      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n\t  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n\t  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n\t}\n\t\n\tvar length = function(object) {\n\t  lengthSum.reset();\n\t  geoStream(object, lengthStream);\n\t  return +lengthSum;\n\t};\n\t\n\tvar coordinates = [null, null];\n\tvar object = {type: \"LineString\", coordinates: coordinates};\n\t\n\tvar distance = function(a, b) {\n\t  coordinates[0] = a;\n\t  coordinates[1] = b;\n\t  return length(object);\n\t};\n\t\n\tvar containsObjectType = {\n\t  Feature: function(object, point) {\n\t    return containsGeometry(object.geometry, point);\n\t  },\n\t  FeatureCollection: function(object, point) {\n\t    var features = object.features, i = -1, n = features.length;\n\t    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n\t    return false;\n\t  }\n\t};\n\t\n\tvar containsGeometryType = {\n\t  Sphere: function() {\n\t    return true;\n\t  },\n\t  Point: function(object, point) {\n\t    return containsPoint(object.coordinates, point);\n\t  },\n\t  MultiPoint: function(object, point) {\n\t    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n\t    return false;\n\t  },\n\t  LineString: function(object, point) {\n\t    return containsLine(object.coordinates, point);\n\t  },\n\t  MultiLineString: function(object, point) {\n\t    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n\t    return false;\n\t  },\n\t  Polygon: function(object, point) {\n\t    return containsPolygon(object.coordinates, point);\n\t  },\n\t  MultiPolygon: function(object, point) {\n\t    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n\t    return false;\n\t  },\n\t  GeometryCollection: function(object, point) {\n\t    var geometries = object.geometries, i = -1, n = geometries.length;\n\t    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n\t    return false;\n\t  }\n\t};\n\t\n\tfunction containsGeometry(geometry, point) {\n\t  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n\t      ? containsGeometryType[geometry.type](geometry, point)\n\t      : false;\n\t}\n\t\n\tfunction containsPoint(coordinates, point) {\n\t  return distance(coordinates, point) === 0;\n\t}\n\t\n\tfunction containsLine(coordinates, point) {\n\t  var ab = distance(coordinates[0], coordinates[1]),\n\t      ao = distance(coordinates[0], point),\n\t      ob = distance(point, coordinates[1]);\n\t  return ao + ob <= ab + epsilon;\n\t}\n\t\n\tfunction containsPolygon(coordinates, point) {\n\t  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n\t}\n\t\n\tfunction ringRadians(ring) {\n\t  return ring = ring.map(pointRadians), ring.pop(), ring;\n\t}\n\t\n\tfunction pointRadians(point) {\n\t  return [point[0] * radians, point[1] * radians];\n\t}\n\t\n\tvar contains = function(object, point) {\n\t  return (object && containsObjectType.hasOwnProperty(object.type)\n\t      ? containsObjectType[object.type]\n\t      : containsGeometry)(object, point);\n\t};\n\t\n\tfunction graticuleX(y0, y1, dy) {\n\t  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);\n\t  return function(x) { return y.map(function(y) { return [x, y]; }); };\n\t}\n\t\n\tfunction graticuleY(x0, x1, dx) {\n\t  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);\n\t  return function(y) { return x.map(function(x) { return [x, y]; }); };\n\t}\n\t\n\tfunction graticule() {\n\t  var x1, x0, X1, X0,\n\t      y1, y0, Y1, Y0,\n\t      dx = 10, dy = dx, DX = 90, DY = 360,\n\t      x, y, X, Y,\n\t      precision = 2.5;\n\t\n\t  function graticule() {\n\t    return {type: \"MultiLineString\", coordinates: lines()};\n\t  }\n\t\n\t  function lines() {\n\t    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)\n\t        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n\t        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n\t        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n\t  }\n\t\n\t  graticule.lines = function() {\n\t    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n\t  };\n\t\n\t  graticule.outline = function() {\n\t    return {\n\t      type: \"Polygon\",\n\t      coordinates: [\n\t        X(X0).concat(\n\t        Y(Y1).slice(1),\n\t        X(X1).reverse().slice(1),\n\t        Y(Y0).reverse().slice(1))\n\t      ]\n\t    };\n\t  };\n\t\n\t  graticule.extent = function(_) {\n\t    if (!arguments.length) return graticule.extentMinor();\n\t    return graticule.extentMajor(_).extentMinor(_);\n\t  };\n\t\n\t  graticule.extentMajor = function(_) {\n\t    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n\t    X0 = +_[0][0], X1 = +_[1][0];\n\t    Y0 = +_[0][1], Y1 = +_[1][1];\n\t    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n\t    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n\t    return graticule.precision(precision);\n\t  };\n\t\n\t  graticule.extentMinor = function(_) {\n\t    if (!arguments.length) return [[x0, y0], [x1, y1]];\n\t    x0 = +_[0][0], x1 = +_[1][0];\n\t    y0 = +_[0][1], y1 = +_[1][1];\n\t    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n\t    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n\t    return graticule.precision(precision);\n\t  };\n\t\n\t  graticule.step = function(_) {\n\t    if (!arguments.length) return graticule.stepMinor();\n\t    return graticule.stepMajor(_).stepMinor(_);\n\t  };\n\t\n\t  graticule.stepMajor = function(_) {\n\t    if (!arguments.length) return [DX, DY];\n\t    DX = +_[0], DY = +_[1];\n\t    return graticule;\n\t  };\n\t\n\t  graticule.stepMinor = function(_) {\n\t    if (!arguments.length) return [dx, dy];\n\t    dx = +_[0], dy = +_[1];\n\t    return graticule;\n\t  };\n\t\n\t  graticule.precision = function(_) {\n\t    if (!arguments.length) return precision;\n\t    precision = +_;\n\t    x = graticuleX(y0, y1, 90);\n\t    y = graticuleY(x0, x1, precision);\n\t    X = graticuleX(Y0, Y1, 90);\n\t    Y = graticuleY(X0, X1, precision);\n\t    return graticule;\n\t  };\n\t\n\t  return graticule\n\t      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n\t      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n\t}\n\t\n\tfunction graticule10() {\n\t  return graticule()();\n\t}\n\t\n\tvar interpolate = function(a, b) {\n\t  var x0 = a[0] * radians,\n\t      y0 = a[1] * radians,\n\t      x1 = b[0] * radians,\n\t      y1 = b[1] * radians,\n\t      cy0 = cos(y0),\n\t      sy0 = sin(y0),\n\t      cy1 = cos(y1),\n\t      sy1 = sin(y1),\n\t      kx0 = cy0 * cos(x0),\n\t      ky0 = cy0 * sin(x0),\n\t      kx1 = cy1 * cos(x1),\n\t      ky1 = cy1 * sin(x1),\n\t      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n\t      k = sin(d);\n\t\n\t  var interpolate = d ? function(t) {\n\t    var B = sin(t *= d) / k,\n\t        A = sin(d - t) / k,\n\t        x = A * kx0 + B * kx1,\n\t        y = A * ky0 + B * ky1,\n\t        z = A * sy0 + B * sy1;\n\t    return [\n\t      atan2(y, x) * degrees,\n\t      atan2(z, sqrt(x * x + y * y)) * degrees\n\t    ];\n\t  } : function() {\n\t    return [x0 * degrees, y0 * degrees];\n\t  };\n\t\n\t  interpolate.distance = d;\n\t\n\t  return interpolate;\n\t};\n\t\n\tvar identity = function(x) {\n\t  return x;\n\t};\n\t\n\tvar areaSum$1 = adder();\n\tvar areaRingSum$1 = adder();\n\tvar x00;\n\tvar y00;\n\tvar x0$1;\n\tvar y0$1;\n\t\n\tvar areaStream$1 = {\n\t  point: noop,\n\t  lineStart: noop,\n\t  lineEnd: noop,\n\t  polygonStart: function() {\n\t    areaStream$1.lineStart = areaRingStart$1;\n\t    areaStream$1.lineEnd = areaRingEnd$1;\n\t  },\n\t  polygonEnd: function() {\n\t    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;\n\t    areaSum$1.add(abs(areaRingSum$1));\n\t    areaRingSum$1.reset();\n\t  },\n\t  result: function() {\n\t    var area = areaSum$1 / 2;\n\t    areaSum$1.reset();\n\t    return area;\n\t  }\n\t};\n\t\n\tfunction areaRingStart$1() {\n\t  areaStream$1.point = areaPointFirst$1;\n\t}\n\t\n\tfunction areaPointFirst$1(x, y) {\n\t  areaStream$1.point = areaPoint$1;\n\t  x00 = x0$1 = x, y00 = y0$1 = y;\n\t}\n\t\n\tfunction areaPoint$1(x, y) {\n\t  areaRingSum$1.add(y0$1 * x - x0$1 * y);\n\t  x0$1 = x, y0$1 = y;\n\t}\n\t\n\tfunction areaRingEnd$1() {\n\t  areaPoint$1(x00, y00);\n\t}\n\t\n\tvar x0$2 = Infinity;\n\tvar y0$2 = x0$2;\n\tvar x1 = -x0$2;\n\tvar y1 = x1;\n\t\n\tvar boundsStream$1 = {\n\t  point: boundsPoint$1,\n\t  lineStart: noop,\n\t  lineEnd: noop,\n\t  polygonStart: noop,\n\t  polygonEnd: noop,\n\t  result: function() {\n\t    var bounds = [[x0$2, y0$2], [x1, y1]];\n\t    x1 = y1 = -(y0$2 = x0$2 = Infinity);\n\t    return bounds;\n\t  }\n\t};\n\t\n\tfunction boundsPoint$1(x, y) {\n\t  if (x < x0$2) x0$2 = x;\n\t  if (x > x1) x1 = x;\n\t  if (y < y0$2) y0$2 = y;\n\t  if (y > y1) y1 = y;\n\t}\n\t\n\t// TODO Enforce positive area for exterior, negative area for interior?\n\t\n\tvar X0$1 = 0;\n\tvar Y0$1 = 0;\n\tvar Z0$1 = 0;\n\tvar X1$1 = 0;\n\tvar Y1$1 = 0;\n\tvar Z1$1 = 0;\n\tvar X2$1 = 0;\n\tvar Y2$1 = 0;\n\tvar Z2$1 = 0;\n\tvar x00$1;\n\tvar y00$1;\n\tvar x0$3;\n\tvar y0$3;\n\t\n\tvar centroidStream$1 = {\n\t  point: centroidPoint$1,\n\t  lineStart: centroidLineStart$1,\n\t  lineEnd: centroidLineEnd$1,\n\t  polygonStart: function() {\n\t    centroidStream$1.lineStart = centroidRingStart$1;\n\t    centroidStream$1.lineEnd = centroidRingEnd$1;\n\t  },\n\t  polygonEnd: function() {\n\t    centroidStream$1.point = centroidPoint$1;\n\t    centroidStream$1.lineStart = centroidLineStart$1;\n\t    centroidStream$1.lineEnd = centroidLineEnd$1;\n\t  },\n\t  result: function() {\n\t    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n\t        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n\t        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n\t        : [NaN, NaN];\n\t    X0$1 = Y0$1 = Z0$1 =\n\t    X1$1 = Y1$1 = Z1$1 =\n\t    X2$1 = Y2$1 = Z2$1 = 0;\n\t    return centroid;\n\t  }\n\t};\n\t\n\tfunction centroidPoint$1(x, y) {\n\t  X0$1 += x;\n\t  Y0$1 += y;\n\t  ++Z0$1;\n\t}\n\t\n\tfunction centroidLineStart$1() {\n\t  centroidStream$1.point = centroidPointFirstLine;\n\t}\n\t\n\tfunction centroidPointFirstLine(x, y) {\n\t  centroidStream$1.point = centroidPointLine;\n\t  centroidPoint$1(x0$3 = x, y0$3 = y);\n\t}\n\t\n\tfunction centroidPointLine(x, y) {\n\t  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);\n\t  X1$1 += z * (x0$3 + x) / 2;\n\t  Y1$1 += z * (y0$3 + y) / 2;\n\t  Z1$1 += z;\n\t  centroidPoint$1(x0$3 = x, y0$3 = y);\n\t}\n\t\n\tfunction centroidLineEnd$1() {\n\t  centroidStream$1.point = centroidPoint$1;\n\t}\n\t\n\tfunction centroidRingStart$1() {\n\t  centroidStream$1.point = centroidPointFirstRing;\n\t}\n\t\n\tfunction centroidRingEnd$1() {\n\t  centroidPointRing(x00$1, y00$1);\n\t}\n\t\n\tfunction centroidPointFirstRing(x, y) {\n\t  centroidStream$1.point = centroidPointRing;\n\t  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n\t}\n\t\n\tfunction centroidPointRing(x, y) {\n\t  var dx = x - x0$3,\n\t      dy = y - y0$3,\n\t      z = sqrt(dx * dx + dy * dy);\n\t\n\t  X1$1 += z * (x0$3 + x) / 2;\n\t  Y1$1 += z * (y0$3 + y) / 2;\n\t  Z1$1 += z;\n\t\n\t  z = y0$3 * x - x0$3 * y;\n\t  X2$1 += z * (x0$3 + x);\n\t  Y2$1 += z * (y0$3 + y);\n\t  Z2$1 += z * 3;\n\t  centroidPoint$1(x0$3 = x, y0$3 = y);\n\t}\n\t\n\tfunction PathContext(context) {\n\t  this._context = context;\n\t}\n\t\n\tPathContext.prototype = {\n\t  _radius: 4.5,\n\t  pointRadius: function(_) {\n\t    return this._radius = _, this;\n\t  },\n\t  polygonStart: function() {\n\t    this._line = 0;\n\t  },\n\t  polygonEnd: function() {\n\t    this._line = NaN;\n\t  },\n\t  lineStart: function() {\n\t    this._point = 0;\n\t  },\n\t  lineEnd: function() {\n\t    if (this._line === 0) this._context.closePath();\n\t    this._point = NaN;\n\t  },\n\t  point: function(x, y) {\n\t    switch (this._point) {\n\t      case 0: {\n\t        this._context.moveTo(x, y);\n\t        this._point = 1;\n\t        break;\n\t      }\n\t      case 1: {\n\t        this._context.lineTo(x, y);\n\t        break;\n\t      }\n\t      default: {\n\t        this._context.moveTo(x + this._radius, y);\n\t        this._context.arc(x, y, this._radius, 0, tau);\n\t        break;\n\t      }\n\t    }\n\t  },\n\t  result: noop\n\t};\n\t\n\tvar lengthSum$1 = adder();\n\tvar lengthRing;\n\tvar x00$2;\n\tvar y00$2;\n\tvar x0$4;\n\tvar y0$4;\n\t\n\tvar lengthStream$1 = {\n\t  point: noop,\n\t  lineStart: function() {\n\t    lengthStream$1.point = lengthPointFirst$1;\n\t  },\n\t  lineEnd: function() {\n\t    if (lengthRing) lengthPoint$1(x00$2, y00$2);\n\t    lengthStream$1.point = noop;\n\t  },\n\t  polygonStart: function() {\n\t    lengthRing = true;\n\t  },\n\t  polygonEnd: function() {\n\t    lengthRing = null;\n\t  },\n\t  result: function() {\n\t    var length = +lengthSum$1;\n\t    lengthSum$1.reset();\n\t    return length;\n\t  }\n\t};\n\t\n\tfunction lengthPointFirst$1(x, y) {\n\t  lengthStream$1.point = lengthPoint$1;\n\t  x00$2 = x0$4 = x, y00$2 = y0$4 = y;\n\t}\n\t\n\tfunction lengthPoint$1(x, y) {\n\t  x0$4 -= x, y0$4 -= y;\n\t  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));\n\t  x0$4 = x, y0$4 = y;\n\t}\n\t\n\tfunction PathString() {\n\t  this._string = [];\n\t}\n\t\n\tPathString.prototype = {\n\t  _radius: 4.5,\n\t  _circle: circle$1(4.5),\n\t  pointRadius: function(_) {\n\t    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n\t    return this;\n\t  },\n\t  polygonStart: function() {\n\t    this._line = 0;\n\t  },\n\t  polygonEnd: function() {\n\t    this._line = NaN;\n\t  },\n\t  lineStart: function() {\n\t    this._point = 0;\n\t  },\n\t  lineEnd: function() {\n\t    if (this._line === 0) this._string.push(\"Z\");\n\t    this._point = NaN;\n\t  },\n\t  point: function(x, y) {\n\t    switch (this._point) {\n\t      case 0: {\n\t        this._string.push(\"M\", x, \",\", y);\n\t        this._point = 1;\n\t        break;\n\t      }\n\t      case 1: {\n\t        this._string.push(\"L\", x, \",\", y);\n\t        break;\n\t      }\n\t      default: {\n\t        if (this._circle == null) this._circle = circle$1(this._radius);\n\t        this._string.push(\"M\", x, \",\", y, this._circle);\n\t        break;\n\t      }\n\t    }\n\t  },\n\t  result: function() {\n\t    if (this._string.length) {\n\t      var result = this._string.join(\"\");\n\t      this._string = [];\n\t      return result;\n\t    } else {\n\t      return null;\n\t    }\n\t  }\n\t};\n\t\n\tfunction circle$1(radius) {\n\t  return \"m0,\" + radius\n\t      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n\t      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n\t      + \"z\";\n\t}\n\t\n\tvar index = function(projection, context) {\n\t  var pointRadius = 4.5,\n\t      projectionStream,\n\t      contextStream;\n\t\n\t  function path(object) {\n\t    if (object) {\n\t      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n\t      geoStream(object, projectionStream(contextStream));\n\t    }\n\t    return contextStream.result();\n\t  }\n\t\n\t  path.area = function(object) {\n\t    geoStream(object, projectionStream(areaStream$1));\n\t    return areaStream$1.result();\n\t  };\n\t\n\t  path.measure = function(object) {\n\t    geoStream(object, projectionStream(lengthStream$1));\n\t    return lengthStream$1.result();\n\t  };\n\t\n\t  path.bounds = function(object) {\n\t    geoStream(object, projectionStream(boundsStream$1));\n\t    return boundsStream$1.result();\n\t  };\n\t\n\t  path.centroid = function(object) {\n\t    geoStream(object, projectionStream(centroidStream$1));\n\t    return centroidStream$1.result();\n\t  };\n\t\n\t  path.projection = function(_) {\n\t    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n\t  };\n\t\n\t  path.context = function(_) {\n\t    if (!arguments.length) return context;\n\t    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n\t    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n\t    return path;\n\t  };\n\t\n\t  path.pointRadius = function(_) {\n\t    if (!arguments.length) return pointRadius;\n\t    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n\t    return path;\n\t  };\n\t\n\t  return path.projection(projection).context(context);\n\t};\n\t\n\tvar transform = function(methods) {\n\t  return {\n\t    stream: transformer(methods)\n\t  };\n\t};\n\t\n\tfunction transformer(methods) {\n\t  return function(stream) {\n\t    var s = new TransformStream;\n\t    for (var key in methods) s[key] = methods[key];\n\t    s.stream = stream;\n\t    return s;\n\t  };\n\t}\n\t\n\tfunction TransformStream() {}\n\t\n\tTransformStream.prototype = {\n\t  constructor: TransformStream,\n\t  point: function(x, y) { this.stream.point(x, y); },\n\t  sphere: function() { this.stream.sphere(); },\n\t  lineStart: function() { this.stream.lineStart(); },\n\t  lineEnd: function() { this.stream.lineEnd(); },\n\t  polygonStart: function() { this.stream.polygonStart(); },\n\t  polygonEnd: function() { this.stream.polygonEnd(); }\n\t};\n\t\n\tfunction fit(projection, fitBounds, object) {\n\t  var clip = projection.clipExtent && projection.clipExtent();\n\t  projection.scale(150).translate([0, 0]);\n\t  if (clip != null) projection.clipExtent(null);\n\t  geoStream(object, projection.stream(boundsStream$1));\n\t  fitBounds(boundsStream$1.result());\n\t  if (clip != null) projection.clipExtent(clip);\n\t  return projection;\n\t}\n\t\n\tfunction fitExtent(projection, extent, object) {\n\t  return fit(projection, function(b) {\n\t    var w = extent[1][0] - extent[0][0],\n\t        h = extent[1][1] - extent[0][1],\n\t        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n\t        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n\t        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n\t    projection.scale(150 * k).translate([x, y]);\n\t  }, object);\n\t}\n\t\n\tfunction fitSize(projection, size, object) {\n\t  return fitExtent(projection, [[0, 0], size], object);\n\t}\n\t\n\tfunction fitWidth(projection, width, object) {\n\t  return fit(projection, function(b) {\n\t    var w = +width,\n\t        k = w / (b[1][0] - b[0][0]),\n\t        x = (w - k * (b[1][0] + b[0][0])) / 2,\n\t        y = -k * b[0][1];\n\t    projection.scale(150 * k).translate([x, y]);\n\t  }, object);\n\t}\n\t\n\tfunction fitHeight(projection, height, object) {\n\t  return fit(projection, function(b) {\n\t    var h = +height,\n\t        k = h / (b[1][1] - b[0][1]),\n\t        x = -k * b[0][0],\n\t        y = (h - k * (b[1][1] + b[0][1])) / 2;\n\t    projection.scale(150 * k).translate([x, y]);\n\t  }, object);\n\t}\n\t\n\tvar maxDepth = 16;\n\tvar cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\t\n\tvar resample = function(project, delta2) {\n\t  return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n\t};\n\t\n\tfunction resampleNone(project) {\n\t  return transformer({\n\t    point: function(x, y) {\n\t      x = project(x, y);\n\t      this.stream.point(x[0], x[1]);\n\t    }\n\t  });\n\t}\n\t\n\tfunction resample$1(project, delta2) {\n\t\n\t  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n\t    var dx = x1 - x0,\n\t        dy = y1 - y0,\n\t        d2 = dx * dx + dy * dy;\n\t    if (d2 > 4 * delta2 && depth--) {\n\t      var a = a0 + a1,\n\t          b = b0 + b1,\n\t          c = c0 + c1,\n\t          m = sqrt(a * a + b * b + c * c),\n\t          phi2 = asin(c /= m),\n\t          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n\t          p = project(lambda2, phi2),\n\t          x2 = p[0],\n\t          y2 = p[1],\n\t          dx2 = x2 - x0,\n\t          dy2 = y2 - y0,\n\t          dz = dy * dx2 - dx * dy2;\n\t      if (dz * dz / d2 > delta2 // perpendicular projected distance\n\t          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n\t          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n\t        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n\t        stream.point(x2, y2);\n\t        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n\t      }\n\t    }\n\t  }\n\t  return function(stream) {\n\t    var lambda00, x00, y00, a00, b00, c00, // first point\n\t        lambda0, x0, y0, a0, b0, c0; // previous point\n\t\n\t    var resampleStream = {\n\t      point: point,\n\t      lineStart: lineStart,\n\t      lineEnd: lineEnd,\n\t      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n\t      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n\t    };\n\t\n\t    function point(x, y) {\n\t      x = project(x, y);\n\t      stream.point(x[0], x[1]);\n\t    }\n\t\n\t    function lineStart() {\n\t      x0 = NaN;\n\t      resampleStream.point = linePoint;\n\t      stream.lineStart();\n\t    }\n\t\n\t    function linePoint(lambda, phi) {\n\t      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n\t      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n\t      stream.point(x0, y0);\n\t    }\n\t\n\t    function lineEnd() {\n\t      resampleStream.point = point;\n\t      stream.lineEnd();\n\t    }\n\t\n\t    function ringStart() {\n\t      lineStart();\n\t      resampleStream.point = ringPoint;\n\t      resampleStream.lineEnd = ringEnd;\n\t    }\n\t\n\t    function ringPoint(lambda, phi) {\n\t      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n\t      resampleStream.point = linePoint;\n\t    }\n\t\n\t    function ringEnd() {\n\t      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n\t      resampleStream.lineEnd = lineEnd;\n\t      lineEnd();\n\t    }\n\t\n\t    return resampleStream;\n\t  };\n\t}\n\t\n\tvar transformRadians = transformer({\n\t  point: function(x, y) {\n\t    this.stream.point(x * radians, y * radians);\n\t  }\n\t});\n\t\n\tfunction transformRotate(rotate) {\n\t  return transformer({\n\t    point: function(x, y) {\n\t      var r = rotate(x, y);\n\t      return this.stream.point(r[0], r[1]);\n\t    }\n\t  });\n\t}\n\t\n\tfunction projection(project) {\n\t  return projectionMutator(function() { return project; })();\n\t}\n\t\n\tfunction projectionMutator(projectAt) {\n\t  var project,\n\t      k = 150, // scale\n\t      x = 480, y = 250, // translate\n\t      dx, dy, lambda = 0, phi = 0, // center\n\t      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n\t      theta = null, preclip = clipAntimeridian, // clip angle\n\t      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n\t      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n\t      cache,\n\t      cacheStream;\n\t\n\t  function projection(point) {\n\t    point = projectRotate(point[0] * radians, point[1] * radians);\n\t    return [point[0] * k + dx, dy - point[1] * k];\n\t  }\n\t\n\t  function invert(point) {\n\t    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n\t    return point && [point[0] * degrees, point[1] * degrees];\n\t  }\n\t\n\t  function projectTransform(x, y) {\n\t    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n\t  }\n\t\n\t  projection.stream = function(stream) {\n\t    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n\t  };\n\t\n\t  projection.preclip = function(_) {\n\t    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n\t  };\n\t\n\t  projection.postclip = function(_) {\n\t    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n\t  };\n\t\n\t  projection.clipAngle = function(_) {\n\t    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n\t  };\n\t\n\t  projection.clipExtent = function(_) {\n\t    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n\t  };\n\t\n\t  projection.scale = function(_) {\n\t    return arguments.length ? (k = +_, recenter()) : k;\n\t  };\n\t\n\t  projection.translate = function(_) {\n\t    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n\t  };\n\t\n\t  projection.center = function(_) {\n\t    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n\t  };\n\t\n\t  projection.rotate = function(_) {\n\t    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n\t  };\n\t\n\t  projection.precision = function(_) {\n\t    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n\t  };\n\t\n\t  projection.fitExtent = function(extent, object) {\n\t    return fitExtent(projection, extent, object);\n\t  };\n\t\n\t  projection.fitSize = function(size, object) {\n\t    return fitSize(projection, size, object);\n\t  };\n\t\n\t  projection.fitWidth = function(width, object) {\n\t    return fitWidth(projection, width, object);\n\t  };\n\t\n\t  projection.fitHeight = function(height, object) {\n\t    return fitHeight(projection, height, object);\n\t  };\n\t\n\t  function recenter() {\n\t    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n\t    var center = project(lambda, phi);\n\t    dx = x - center[0] * k;\n\t    dy = y + center[1] * k;\n\t    return reset();\n\t  }\n\t\n\t  function reset() {\n\t    cache = cacheStream = null;\n\t    return projection;\n\t  }\n\t\n\t  return function() {\n\t    project = projectAt.apply(this, arguments);\n\t    projection.invert = project.invert && invert;\n\t    return recenter();\n\t  };\n\t}\n\t\n\tfunction conicProjection(projectAt) {\n\t  var phi0 = 0,\n\t      phi1 = pi / 3,\n\t      m = projectionMutator(projectAt),\n\t      p = m(phi0, phi1);\n\t\n\t  p.parallels = function(_) {\n\t    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n\t  };\n\t\n\t  return p;\n\t}\n\t\n\tfunction cylindricalEqualAreaRaw(phi0) {\n\t  var cosPhi0 = cos(phi0);\n\t\n\t  function forward(lambda, phi) {\n\t    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n\t  }\n\t\n\t  forward.invert = function(x, y) {\n\t    return [x / cosPhi0, asin(y * cosPhi0)];\n\t  };\n\t\n\t  return forward;\n\t}\n\t\n\tfunction conicEqualAreaRaw(y0, y1) {\n\t  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\t\n\t  // Are the parallels symmetrical around the Equator?\n\t  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\t\n\t  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\t\n\t  function project(x, y) {\n\t    var r = sqrt(c - 2 * n * sin(y)) / n;\n\t    return [r * sin(x *= n), r0 - r * cos(x)];\n\t  }\n\t\n\t  project.invert = function(x, y) {\n\t    var r0y = r0 - y;\n\t    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n\t  };\n\t\n\t  return project;\n\t}\n\t\n\tvar conicEqualArea = function() {\n\t  return conicProjection(conicEqualAreaRaw)\n\t      .scale(155.424)\n\t      .center([0, 33.6442]);\n\t};\n\t\n\tvar albers = function() {\n\t  return conicEqualArea()\n\t      .parallels([29.5, 45.5])\n\t      .scale(1070)\n\t      .translate([480, 250])\n\t      .rotate([96, 0])\n\t      .center([-0.6, 38.7]);\n\t};\n\t\n\t// The projections must have mutually exclusive clip regions on the sphere,\n\t// as this will avoid emitting interleaving lines and polygons.\n\tfunction multiplex(streams) {\n\t  var n = streams.length;\n\t  return {\n\t    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n\t    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n\t    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n\t    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n\t    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n\t    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n\t  };\n\t}\n\t\n\t// A composite projection for the United States, configured by default for\n\t// 960×500. The projection also works quite well at 960×600 if you change the\n\t// scale to 1285 and adjust the translate accordingly. The set of standard\n\t// parallels for each region comes from USGS, which is published here:\n\t// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n\tvar albersUsa = function() {\n\t  var cache,\n\t      cacheStream,\n\t      lower48 = albers(), lower48Point,\n\t      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n\t      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n\t      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\t\n\t  function albersUsa(coordinates) {\n\t    var x = coordinates[0], y = coordinates[1];\n\t    return point = null, (lower48Point.point(x, y), point)\n\t        || (alaskaPoint.point(x, y), point)\n\t        || (hawaiiPoint.point(x, y), point);\n\t  }\n\t\n\t  albersUsa.invert = function(coordinates) {\n\t    var k = lower48.scale(),\n\t        t = lower48.translate(),\n\t        x = (coordinates[0] - t[0]) / k,\n\t        y = (coordinates[1] - t[1]) / k;\n\t    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n\t        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n\t        : lower48).invert(coordinates);\n\t  };\n\t\n\t  albersUsa.stream = function(stream) {\n\t    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n\t  };\n\t\n\t  albersUsa.precision = function(_) {\n\t    if (!arguments.length) return lower48.precision();\n\t    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n\t    return reset();\n\t  };\n\t\n\t  albersUsa.scale = function(_) {\n\t    if (!arguments.length) return lower48.scale();\n\t    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n\t    return albersUsa.translate(lower48.translate());\n\t  };\n\t\n\t  albersUsa.translate = function(_) {\n\t    if (!arguments.length) return lower48.translate();\n\t    var k = lower48.scale(), x = +_[0], y = +_[1];\n\t\n\t    lower48Point = lower48\n\t        .translate(_)\n\t        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n\t        .stream(pointStream);\n\t\n\t    alaskaPoint = alaska\n\t        .translate([x - 0.307 * k, y + 0.201 * k])\n\t        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n\t        .stream(pointStream);\n\t\n\t    hawaiiPoint = hawaii\n\t        .translate([x - 0.205 * k, y + 0.212 * k])\n\t        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n\t        .stream(pointStream);\n\t\n\t    return reset();\n\t  };\n\t\n\t  albersUsa.fitExtent = function(extent, object) {\n\t    return fitExtent(albersUsa, extent, object);\n\t  };\n\t\n\t  albersUsa.fitSize = function(size, object) {\n\t    return fitSize(albersUsa, size, object);\n\t  };\n\t\n\t  albersUsa.fitWidth = function(width, object) {\n\t    return fitWidth(albersUsa, width, object);\n\t  };\n\t\n\t  albersUsa.fitHeight = function(height, object) {\n\t    return fitHeight(albersUsa, height, object);\n\t  };\n\t\n\t  function reset() {\n\t    cache = cacheStream = null;\n\t    return albersUsa;\n\t  }\n\t\n\t  return albersUsa.scale(1070);\n\t};\n\t\n\tfunction azimuthalRaw(scale) {\n\t  return function(x, y) {\n\t    var cx = cos(x),\n\t        cy = cos(y),\n\t        k = scale(cx * cy);\n\t    return [\n\t      k * cy * sin(x),\n\t      k * sin(y)\n\t    ];\n\t  }\n\t}\n\t\n\tfunction azimuthalInvert(angle) {\n\t  return function(x, y) {\n\t    var z = sqrt(x * x + y * y),\n\t        c = angle(z),\n\t        sc = sin(c),\n\t        cc = cos(c);\n\t    return [\n\t      atan2(x * sc, z * cc),\n\t      asin(z && y * sc / z)\n\t    ];\n\t  }\n\t}\n\t\n\tvar azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n\t  return sqrt(2 / (1 + cxcy));\n\t});\n\t\n\tazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n\t  return 2 * asin(z / 2);\n\t});\n\t\n\tvar azimuthalEqualArea = function() {\n\t  return projection(azimuthalEqualAreaRaw)\n\t      .scale(124.75)\n\t      .clipAngle(180 - 1e-3);\n\t};\n\t\n\tvar azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n\t  return (c = acos(c)) && c / sin(c);\n\t});\n\t\n\tazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n\t  return z;\n\t});\n\t\n\tvar azimuthalEquidistant = function() {\n\t  return projection(azimuthalEquidistantRaw)\n\t      .scale(79.4188)\n\t      .clipAngle(180 - 1e-3);\n\t};\n\t\n\tfunction mercatorRaw(lambda, phi) {\n\t  return [lambda, log(tan((halfPi + phi) / 2))];\n\t}\n\t\n\tmercatorRaw.invert = function(x, y) {\n\t  return [x, 2 * atan(exp(y)) - halfPi];\n\t};\n\t\n\tvar mercator = function() {\n\t  return mercatorProjection(mercatorRaw)\n\t      .scale(961 / tau);\n\t};\n\t\n\tfunction mercatorProjection(project) {\n\t  var m = projection(project),\n\t      center = m.center,\n\t      scale = m.scale,\n\t      translate = m.translate,\n\t      clipExtent = m.clipExtent,\n\t      x0 = null, y0, x1, y1; // clip extent\n\t\n\t  m.scale = function(_) {\n\t    return arguments.length ? (scale(_), reclip()) : scale();\n\t  };\n\t\n\t  m.translate = function(_) {\n\t    return arguments.length ? (translate(_), reclip()) : translate();\n\t  };\n\t\n\t  m.center = function(_) {\n\t    return arguments.length ? (center(_), reclip()) : center();\n\t  };\n\t\n\t  m.clipExtent = function(_) {\n\t    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n\t  };\n\t\n\t  function reclip() {\n\t    var k = pi * scale(),\n\t        t = m(rotation(m.rotate()).invert([0, 0]));\n\t    return clipExtent(x0 == null\n\t        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n\t        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n\t        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n\t  }\n\t\n\t  return reclip();\n\t}\n\t\n\tfunction tany(y) {\n\t  return tan((halfPi + y) / 2);\n\t}\n\t\n\tfunction conicConformalRaw(y0, y1) {\n\t  var cy0 = cos(y0),\n\t      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n\t      f = cy0 * pow(tany(y0), n) / n;\n\t\n\t  if (!n) return mercatorRaw;\n\t\n\t  function project(x, y) {\n\t    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n\t    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n\t    var r = f / pow(tany(y), n);\n\t    return [r * sin(n * x), f - r * cos(n * x)];\n\t  }\n\t\n\t  project.invert = function(x, y) {\n\t    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n\t    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n\t  };\n\t\n\t  return project;\n\t}\n\t\n\tvar conicConformal = function() {\n\t  return conicProjection(conicConformalRaw)\n\t      .scale(109.5)\n\t      .parallels([30, 30]);\n\t};\n\t\n\tfunction equirectangularRaw(lambda, phi) {\n\t  return [lambda, phi];\n\t}\n\t\n\tequirectangularRaw.invert = equirectangularRaw;\n\t\n\tvar equirectangular = function() {\n\t  return projection(equirectangularRaw)\n\t      .scale(152.63);\n\t};\n\t\n\tfunction conicEquidistantRaw(y0, y1) {\n\t  var cy0 = cos(y0),\n\t      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n\t      g = cy0 / n + y0;\n\t\n\t  if (abs(n) < epsilon) return equirectangularRaw;\n\t\n\t  function project(x, y) {\n\t    var gy = g - y, nx = n * x;\n\t    return [gy * sin(nx), g - gy * cos(nx)];\n\t  }\n\t\n\t  project.invert = function(x, y) {\n\t    var gy = g - y;\n\t    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n\t  };\n\t\n\t  return project;\n\t}\n\t\n\tvar conicEquidistant = function() {\n\t  return conicProjection(conicEquidistantRaw)\n\t      .scale(131.154)\n\t      .center([0, 13.9389]);\n\t};\n\t\n\tfunction gnomonicRaw(x, y) {\n\t  var cy = cos(y), k = cos(x) * cy;\n\t  return [cy * sin(x) / k, sin(y) / k];\n\t}\n\t\n\tgnomonicRaw.invert = azimuthalInvert(atan);\n\t\n\tvar gnomonic = function() {\n\t  return projection(gnomonicRaw)\n\t      .scale(144.049)\n\t      .clipAngle(60);\n\t};\n\t\n\tfunction scaleTranslate(kx, ky, tx, ty) {\n\t  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n\t    point: function(x, y) {\n\t      this.stream.point(x * kx + tx, y * ky + ty);\n\t    }\n\t  });\n\t}\n\t\n\tvar identity$1 = function() {\n\t  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity, // scale, translate and reflect\n\t      x0 = null, y0, x1, y1, // clip extent\n\t      postclip = identity,\n\t      cache,\n\t      cacheStream,\n\t      projection;\n\t\n\t  function reset() {\n\t    cache = cacheStream = null;\n\t    return projection;\n\t  }\n\t\n\t  return projection = {\n\t    stream: function(stream) {\n\t      return cache && cacheStream === stream ? cache : cache = transform$$1(postclip(cacheStream = stream));\n\t    },\n\t    postclip: function(_) {\n\t      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n\t    },\n\t    clipExtent: function(_) {\n\t      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n\t    },\n\t    scale: function(_) {\n\t      return arguments.length ? (transform$$1 = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n\t    },\n\t    translate: function(_) {\n\t      return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n\t    },\n\t    reflectX: function(_) {\n\t      return arguments.length ? (transform$$1 = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n\t    },\n\t    reflectY: function(_) {\n\t      return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n\t    },\n\t    fitExtent: function(extent, object) {\n\t      return fitExtent(projection, extent, object);\n\t    },\n\t    fitSize: function(size, object) {\n\t      return fitSize(projection, size, object);\n\t    },\n\t    fitWidth: function(width, object) {\n\t      return fitWidth(projection, width, object);\n\t    },\n\t    fitHeight: function(height, object) {\n\t      return fitHeight(projection, height, object);\n\t    }\n\t  };\n\t};\n\t\n\tfunction naturalEarth1Raw(lambda, phi) {\n\t  var phi2 = phi * phi, phi4 = phi2 * phi2;\n\t  return [\n\t    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n\t    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n\t  ];\n\t}\n\t\n\tnaturalEarth1Raw.invert = function(x, y) {\n\t  var phi = y, i = 25, delta;\n\t  do {\n\t    var phi2 = phi * phi, phi4 = phi2 * phi2;\n\t    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n\t        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n\t  } while (abs(delta) > epsilon && --i > 0);\n\t  return [\n\t    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n\t    phi\n\t  ];\n\t};\n\t\n\tvar naturalEarth1 = function() {\n\t  return projection(naturalEarth1Raw)\n\t      .scale(175.295);\n\t};\n\t\n\tfunction orthographicRaw(x, y) {\n\t  return [cos(y) * sin(x), sin(y)];\n\t}\n\t\n\torthographicRaw.invert = azimuthalInvert(asin);\n\t\n\tvar orthographic = function() {\n\t  return projection(orthographicRaw)\n\t      .scale(249.5)\n\t      .clipAngle(90 + epsilon);\n\t};\n\t\n\tfunction stereographicRaw(x, y) {\n\t  var cy = cos(y), k = 1 + cos(x) * cy;\n\t  return [cy * sin(x) / k, sin(y) / k];\n\t}\n\t\n\tstereographicRaw.invert = azimuthalInvert(function(z) {\n\t  return 2 * atan(z);\n\t});\n\t\n\tvar stereographic = function() {\n\t  return projection(stereographicRaw)\n\t      .scale(250)\n\t      .clipAngle(142);\n\t};\n\t\n\tfunction transverseMercatorRaw(lambda, phi) {\n\t  return [log(tan((halfPi + phi) / 2)), -lambda];\n\t}\n\t\n\ttransverseMercatorRaw.invert = function(x, y) {\n\t  return [-y, 2 * atan(exp(x)) - halfPi];\n\t};\n\t\n\tvar transverseMercator = function() {\n\t  var m = mercatorProjection(transverseMercatorRaw),\n\t      center = m.center,\n\t      rotate = m.rotate;\n\t\n\t  m.center = function(_) {\n\t    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n\t  };\n\t\n\t  m.rotate = function(_) {\n\t    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n\t  };\n\t\n\t  return rotate([0, 0, 90])\n\t      .scale(159.155);\n\t};\n\t\n\texports.geoArea = area;\n\texports.geoBounds = bounds;\n\texports.geoCentroid = centroid;\n\texports.geoCircle = circle;\n\texports.geoClipAntimeridian = clipAntimeridian;\n\texports.geoClipCircle = clipCircle;\n\texports.geoClipExtent = extent;\n\texports.geoClipRectangle = clipRectangle;\n\texports.geoContains = contains;\n\texports.geoDistance = distance;\n\texports.geoGraticule = graticule;\n\texports.geoGraticule10 = graticule10;\n\texports.geoInterpolate = interpolate;\n\texports.geoLength = length;\n\texports.geoPath = index;\n\texports.geoAlbers = albers;\n\texports.geoAlbersUsa = albersUsa;\n\texports.geoAzimuthalEqualArea = azimuthalEqualArea;\n\texports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\n\texports.geoAzimuthalEquidistant = azimuthalEquidistant;\n\texports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\n\texports.geoConicConformal = conicConformal;\n\texports.geoConicConformalRaw = conicConformalRaw;\n\texports.geoConicEqualArea = conicEqualArea;\n\texports.geoConicEqualAreaRaw = conicEqualAreaRaw;\n\texports.geoConicEquidistant = conicEquidistant;\n\texports.geoConicEquidistantRaw = conicEquidistantRaw;\n\texports.geoEquirectangular = equirectangular;\n\texports.geoEquirectangularRaw = equirectangularRaw;\n\texports.geoGnomonic = gnomonic;\n\texports.geoGnomonicRaw = gnomonicRaw;\n\texports.geoIdentity = identity$1;\n\texports.geoProjection = projection;\n\texports.geoProjectionMutator = projectionMutator;\n\texports.geoMercator = mercator;\n\texports.geoMercatorRaw = mercatorRaw;\n\texports.geoNaturalEarth1 = naturalEarth1;\n\texports.geoNaturalEarth1Raw = naturalEarth1Raw;\n\texports.geoOrthographic = orthographic;\n\texports.geoOrthographicRaw = orthographicRaw;\n\texports.geoStereographic = stereographic;\n\texports.geoStereographicRaw = stereographicRaw;\n\texports.geoTransverseMercator = transverseMercator;\n\texports.geoTransverseMercatorRaw = transverseMercatorRaw;\n\texports.geoRotation = rotation;\n\texports.geoStream = geoStream;\n\texports.geoTransform = transform;\n\t\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n\n/***/ }),\n\n/***/ 555:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// https://github.com/topojson/topojson-client Version 3.0.0. Copyright 2017 Mike Bostock.\n\t(function (global, factory) {\n\t\t true ? factory(exports) :\n\t\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t\t(factory((global.topojson = global.topojson || {})));\n\t}(this, (function (exports) { 'use strict';\n\t\n\tvar identity = function(x) {\n\t  return x;\n\t};\n\t\n\tvar transform = function(transform) {\n\t  if (transform == null) return identity;\n\t  var x0,\n\t      y0,\n\t      kx = transform.scale[0],\n\t      ky = transform.scale[1],\n\t      dx = transform.translate[0],\n\t      dy = transform.translate[1];\n\t  return function(input, i) {\n\t    if (!i) x0 = y0 = 0;\n\t    var j = 2, n = input.length, output = new Array(n);\n\t    output[0] = (x0 += input[0]) * kx + dx;\n\t    output[1] = (y0 += input[1]) * ky + dy;\n\t    while (j < n) output[j] = input[j], ++j;\n\t    return output;\n\t  };\n\t};\n\t\n\tvar bbox = function(topology) {\n\t  var t = transform(topology.transform), key,\n\t      x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\t\n\t  function bboxPoint(p) {\n\t    p = t(p);\n\t    if (p[0] < x0) x0 = p[0];\n\t    if (p[0] > x1) x1 = p[0];\n\t    if (p[1] < y0) y0 = p[1];\n\t    if (p[1] > y1) y1 = p[1];\n\t  }\n\t\n\t  function bboxGeometry(o) {\n\t    switch (o.type) {\n\t      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n\t      case \"Point\": bboxPoint(o.coordinates); break;\n\t      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n\t    }\n\t  }\n\t\n\t  topology.arcs.forEach(function(arc) {\n\t    var i = -1, n = arc.length, p;\n\t    while (++i < n) {\n\t      p = t(arc[i], i);\n\t      if (p[0] < x0) x0 = p[0];\n\t      if (p[0] > x1) x1 = p[0];\n\t      if (p[1] < y0) y0 = p[1];\n\t      if (p[1] > y1) y1 = p[1];\n\t    }\n\t  });\n\t\n\t  for (key in topology.objects) {\n\t    bboxGeometry(topology.objects[key]);\n\t  }\n\t\n\t  return [x0, y0, x1, y1];\n\t};\n\t\n\tvar reverse = function(array, n) {\n\t  var t, j = array.length, i = j - n;\n\t  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n\t};\n\t\n\tvar feature = function(topology, o) {\n\t  return o.type === \"GeometryCollection\"\n\t      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature$1(topology, o); })}\n\t      : feature$1(topology, o);\n\t};\n\t\n\tfunction feature$1(topology, o) {\n\t  var id = o.id,\n\t      bbox = o.bbox,\n\t      properties = o.properties == null ? {} : o.properties,\n\t      geometry = object(topology, o);\n\t  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n\t      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n\t      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n\t}\n\t\n\tfunction object(topology, o) {\n\t  var transformPoint = transform(topology.transform),\n\t      arcs = topology.arcs;\n\t\n\t  function arc(i, points) {\n\t    if (points.length) points.pop();\n\t    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n\t      points.push(transformPoint(a[k], k));\n\t    }\n\t    if (i < 0) reverse(points, n);\n\t  }\n\t\n\t  function point(p) {\n\t    return transformPoint(p);\n\t  }\n\t\n\t  function line(arcs) {\n\t    var points = [];\n\t    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n\t    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n\t    return points;\n\t  }\n\t\n\t  function ring(arcs) {\n\t    var points = line(arcs);\n\t    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n\t    return points;\n\t  }\n\t\n\t  function polygon(arcs) {\n\t    return arcs.map(ring);\n\t  }\n\t\n\t  function geometry(o) {\n\t    var type = o.type, coordinates;\n\t    switch (type) {\n\t      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n\t      case \"Point\": coordinates = point(o.coordinates); break;\n\t      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n\t      case \"LineString\": coordinates = line(o.arcs); break;\n\t      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n\t      case \"Polygon\": coordinates = polygon(o.arcs); break;\n\t      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n\t      default: return null;\n\t    }\n\t    return {type: type, coordinates: coordinates};\n\t  }\n\t\n\t  return geometry(o);\n\t}\n\t\n\tvar stitch = function(topology, arcs) {\n\t  var stitchedArcs = {},\n\t      fragmentByStart = {},\n\t      fragmentByEnd = {},\n\t      fragments = [],\n\t      emptyIndex = -1;\n\t\n\t  // Stitch empty arcs first, since they may be subsumed by other arcs.\n\t  arcs.forEach(function(i, j) {\n\t    var arc = topology.arcs[i < 0 ? ~i : i], t;\n\t    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n\t      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n\t    }\n\t  });\n\t\n\t  arcs.forEach(function(i) {\n\t    var e = ends(i),\n\t        start = e[0],\n\t        end = e[1],\n\t        f, g;\n\t\n\t    if (f = fragmentByEnd[start]) {\n\t      delete fragmentByEnd[f.end];\n\t      f.push(i);\n\t      f.end = end;\n\t      if (g = fragmentByStart[end]) {\n\t        delete fragmentByStart[g.start];\n\t        var fg = g === f ? f : f.concat(g);\n\t        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n\t      } else {\n\t        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n\t      }\n\t    } else if (f = fragmentByStart[end]) {\n\t      delete fragmentByStart[f.start];\n\t      f.unshift(i);\n\t      f.start = start;\n\t      if (g = fragmentByEnd[start]) {\n\t        delete fragmentByEnd[g.end];\n\t        var gf = g === f ? f : g.concat(f);\n\t        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n\t      } else {\n\t        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n\t      }\n\t    } else {\n\t      f = [i];\n\t      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n\t    }\n\t  });\n\t\n\t  function ends(i) {\n\t    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n\t    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n\t    else p1 = arc[arc.length - 1];\n\t    return i < 0 ? [p1, p0] : [p0, p1];\n\t  }\n\t\n\t  function flush(fragmentByEnd, fragmentByStart) {\n\t    for (var k in fragmentByEnd) {\n\t      var f = fragmentByEnd[k];\n\t      delete fragmentByStart[f.start];\n\t      delete f.start;\n\t      delete f.end;\n\t      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n\t      fragments.push(f);\n\t    }\n\t  }\n\t\n\t  flush(fragmentByEnd, fragmentByStart);\n\t  flush(fragmentByStart, fragmentByEnd);\n\t  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\t\n\t  return fragments;\n\t};\n\t\n\tvar mesh = function(topology) {\n\t  return object(topology, meshArcs.apply(this, arguments));\n\t};\n\t\n\tfunction meshArcs(topology, object$$1, filter) {\n\t  var arcs, i, n;\n\t  if (arguments.length > 1) arcs = extractArcs(topology, object$$1, filter);\n\t  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n\t  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n\t}\n\t\n\tfunction extractArcs(topology, object$$1, filter) {\n\t  var arcs = [],\n\t      geomsByArc = [],\n\t      geom;\n\t\n\t  function extract0(i) {\n\t    var j = i < 0 ? ~i : i;\n\t    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n\t  }\n\t\n\t  function extract1(arcs) {\n\t    arcs.forEach(extract0);\n\t  }\n\t\n\t  function extract2(arcs) {\n\t    arcs.forEach(extract1);\n\t  }\n\t\n\t  function extract3(arcs) {\n\t    arcs.forEach(extract2);\n\t  }\n\t\n\t  function geometry(o) {\n\t    switch (geom = o, o.type) {\n\t      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n\t      case \"LineString\": extract1(o.arcs); break;\n\t      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n\t      case \"MultiPolygon\": extract3(o.arcs); break;\n\t    }\n\t  }\n\t\n\t  geometry(object$$1);\n\t\n\t  geomsByArc.forEach(filter == null\n\t      ? function(geoms) { arcs.push(geoms[0].i); }\n\t      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\t\n\t  return arcs;\n\t}\n\t\n\tfunction planarRingArea(ring) {\n\t  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n\t  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n\t  return Math.abs(area); // Note: doubled area!\n\t}\n\t\n\tvar merge = function(topology) {\n\t  return object(topology, mergeArcs.apply(this, arguments));\n\t};\n\t\n\tfunction mergeArcs(topology, objects) {\n\t  var polygonsByArc = {},\n\t      polygons = [],\n\t      groups = [];\n\t\n\t  objects.forEach(geometry);\n\t\n\t  function geometry(o) {\n\t    switch (o.type) {\n\t      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n\t      case \"Polygon\": extract(o.arcs); break;\n\t      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n\t    }\n\t  }\n\t\n\t  function extract(polygon) {\n\t    polygon.forEach(function(ring) {\n\t      ring.forEach(function(arc) {\n\t        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n\t      });\n\t    });\n\t    polygons.push(polygon);\n\t  }\n\t\n\t  function area(ring) {\n\t    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n\t  }\n\t\n\t  polygons.forEach(function(polygon) {\n\t    if (!polygon._) {\n\t      var group = [],\n\t          neighbors = [polygon];\n\t      polygon._ = 1;\n\t      groups.push(group);\n\t      while (polygon = neighbors.pop()) {\n\t        group.push(polygon);\n\t        polygon.forEach(function(ring) {\n\t          ring.forEach(function(arc) {\n\t            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n\t              if (!polygon._) {\n\t                polygon._ = 1;\n\t                neighbors.push(polygon);\n\t              }\n\t            });\n\t          });\n\t        });\n\t      }\n\t    }\n\t  });\n\t\n\t  polygons.forEach(function(polygon) {\n\t    delete polygon._;\n\t  });\n\t\n\t  return {\n\t    type: \"MultiPolygon\",\n\t    arcs: groups.map(function(polygons) {\n\t      var arcs = [], n;\n\t\n\t      // Extract the exterior (unique) arcs.\n\t      polygons.forEach(function(polygon) {\n\t        polygon.forEach(function(ring) {\n\t          ring.forEach(function(arc) {\n\t            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n\t              arcs.push(arc);\n\t            }\n\t          });\n\t        });\n\t      });\n\t\n\t      // Stitch the arcs into one or more rings.\n\t      arcs = stitch(topology, arcs);\n\t\n\t      // If more than one ring is returned,\n\t      // at most one of these rings can be the exterior;\n\t      // choose the one with the greatest absolute area.\n\t      if ((n = arcs.length) > 1) {\n\t        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n\t          if ((ki = area(arcs[i])) > k) {\n\t            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n\t          }\n\t        }\n\t      }\n\t\n\t      return arcs;\n\t    })\n\t  };\n\t}\n\t\n\tvar bisect = function(a, x) {\n\t  var lo = 0, hi = a.length;\n\t  while (lo < hi) {\n\t    var mid = lo + hi >>> 1;\n\t    if (a[mid] < x) lo = mid + 1;\n\t    else hi = mid;\n\t  }\n\t  return lo;\n\t};\n\t\n\tvar neighbors = function(objects) {\n\t  var indexesByArc = {}, // arc index -> array of object indexes\n\t      neighbors = objects.map(function() { return []; });\n\t\n\t  function line(arcs, i) {\n\t    arcs.forEach(function(a) {\n\t      if (a < 0) a = ~a;\n\t      var o = indexesByArc[a];\n\t      if (o) o.push(i);\n\t      else indexesByArc[a] = [i];\n\t    });\n\t  }\n\t\n\t  function polygon(arcs, i) {\n\t    arcs.forEach(function(arc) { line(arc, i); });\n\t  }\n\t\n\t  function geometry(o, i) {\n\t    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n\t    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n\t  }\n\t\n\t  var geometryType = {\n\t    LineString: line,\n\t    MultiLineString: polygon,\n\t    Polygon: polygon,\n\t    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n\t  };\n\t\n\t  objects.forEach(geometry);\n\t\n\t  for (var i in indexesByArc) {\n\t    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n\t      for (var k = j + 1; k < m; ++k) {\n\t        var ij = indexes[j], ik = indexes[k], n;\n\t        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n\t        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n\t      }\n\t    }\n\t  }\n\t\n\t  return neighbors;\n\t};\n\t\n\tvar untransform = function(transform) {\n\t  if (transform == null) return identity;\n\t  var x0,\n\t      y0,\n\t      kx = transform.scale[0],\n\t      ky = transform.scale[1],\n\t      dx = transform.translate[0],\n\t      dy = transform.translate[1];\n\t  return function(input, i) {\n\t    if (!i) x0 = y0 = 0;\n\t    var j = 2,\n\t        n = input.length,\n\t        output = new Array(n),\n\t        x1 = Math.round((input[0] - dx) / kx),\n\t        y1 = Math.round((input[1] - dy) / ky);\n\t    output[0] = x1 - x0, x0 = x1;\n\t    output[1] = y1 - y0, y0 = y1;\n\t    while (j < n) output[j] = input[j], ++j;\n\t    return output;\n\t  };\n\t};\n\t\n\tvar quantize = function(topology, transform) {\n\t  if (topology.transform) throw new Error(\"already quantized\");\n\t\n\t  if (!transform || !transform.scale) {\n\t    if (!((n = Math.floor(transform)) >= 2)) throw new Error(\"n must be ≥2\");\n\t    box = topology.bbox || bbox(topology);\n\t    var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;\n\t    transform = {scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0]};\n\t  } else {\n\t    box = topology.bbox;\n\t  }\n\t\n\t  var t = untransform(transform), box, key, inputs = topology.objects, outputs = {};\n\t\n\t  function quantizePoint(point) {\n\t    return t(point);\n\t  }\n\t\n\t  function quantizeGeometry(input) {\n\t    var output;\n\t    switch (input.type) {\n\t      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\n\t      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\n\t      case \"MultiPoint\": output = {type: \"MultiPoint\", coordinates: input.coordinates.map(quantizePoint)}; break;\n\t      default: return input;\n\t    }\n\t    if (input.id != null) output.id = input.id;\n\t    if (input.bbox != null) output.bbox = input.bbox;\n\t    if (input.properties != null) output.properties = input.properties;\n\t    return output;\n\t  }\n\t\n\t  function quantizeArc(input) {\n\t    var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic\n\t    output[0] = t(input[0], 0);\n\t    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points\n\t    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points\n\t    output.length = j;\n\t    return output;\n\t  }\n\t\n\t  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);\n\t\n\t  return {\n\t    type: \"Topology\",\n\t    bbox: box,\n\t    transform: transform,\n\t    objects: outputs,\n\t    arcs: topology.arcs.map(quantizeArc)\n\t  };\n\t};\n\t\n\texports.bbox = bbox;\n\texports.feature = feature;\n\texports.mesh = mesh;\n\texports.meshArcs = meshArcs;\n\texports.merge = merge;\n\texports.mergeArcs = mergeArcs;\n\texports.neighbors = neighbors;\n\texports.quantize = quantize;\n\texports.transform = transform;\n\texports.untransform = untransform;\n\t\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n\n/***/ }),\n\n/***/ 390:\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 305:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(2);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _WorldMap = __webpack_require__(309);\n\t\n\tvar _WorldMap2 = _interopRequireDefault(_WorldMap);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar GlobeViewChart = function (_Component) {\n\t    _inherits(GlobeViewChart, _Component);\n\t\n\t    function GlobeViewChart() {\n\t        var _temp, _this, _ret;\n\t\n\t        _classCallCheck(this, GlobeViewChart);\n\t\n\t        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t            args[_key] = arguments[_key];\n\t        }\n\t\n\t        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.showToolTipInfo = function (value) {\n\t            var showToolTip = _this.props.showToolTip;\n\t\n\t            showToolTip(value);\n\t        }, _this.hideToolTipInfo = function () {\n\t            var hideToolTip = _this.props.hideToolTip;\n\t\n\t            hideToolTip();\n\t        }, _temp), _possibleConstructorReturn(_this, _ret);\n\t    }\n\t\n\t    GlobeViewChart.prototype.render = function render() {\n\t        var _props = this.props,\n\t            globeData = _props.globeData,\n\t            meteorsInfo = _props.meteorsInfo;\n\t\n\t        var svgDimensions = {\n\t            width: 820,\n\t            height: 550\n\t        };\n\t        return _react2.default.createElement(\n\t            'svg',\n\t            { width: svgDimensions.width, height: svgDimensions.height, viewBox: '0 0 ' + svgDimensions.width + ' ' + svgDimensions.height },\n\t            _react2.default.createElement(_WorldMap2.default, { width: svgDimensions.width,\n\t                height: svgDimensions.height,\n\t                world: globeData, meteorfall: meteorsInfo,\n\t                pointEnter: this.showToolTipInfo,\n\t                pointExit: this.hideToolTipInfo\n\t            })\n\t        );\n\t    };\n\t\n\t    return GlobeViewChart;\n\t}(_react.Component);\n\t\n\tGlobeViewChart.propTypes = {\n\t    //globeData:PropTypes.obj\n\t};\n\texports.default = GlobeViewChart;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 306:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _topojsonClient = __webpack_require__(555);\n\t\n\tvar _GlobeViewChart = __webpack_require__(305);\n\t\n\tvar _GlobeViewChart2 = _interopRequireDefault(_GlobeViewChart);\n\t\n\tvar _MeteorToolTip = __webpack_require__(308);\n\t\n\tvar _MeteorToolTip2 = _interopRequireDefault(_MeteorToolTip);\n\t\n\tvar _Utilities = __webpack_require__(81);\n\t\n\tvar _Utilities2 = _interopRequireDefault(_Utilities);\n\t\n\t__webpack_require__(390);\n\t\n\tvar _globeStyleModule = __webpack_require__(389);\n\t\n\tvar _globeStyleModule2 = _interopRequireDefault(_globeStyleModule);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar GlobeViewContainer = function (_Component) {\n\t    _inherits(GlobeViewContainer, _Component);\n\t\n\t    function GlobeViewContainer() {\n\t        _classCallCheck(this, GlobeViewContainer);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Component.call(this));\n\t\n\t        _this.activateToolTip = function (value) {\n\t            _this.setState({ isToolTipActive: true, meteorInfo: value });\n\t        };\n\t\n\t        _this.disableToolTip = function () {\n\t            _this.setState({ isToolTipActive: false, meteorInfo: {} });\n\t        };\n\t\n\t        _this.state = {\n\t            isLoading: true,\n\t            isError: false,\n\t            meteors: {},\n\t            globeMap: [],\n\t            isToolTipActive: false,\n\t            meteorInfo: {}\n\t        };\n\t        return _this;\n\t    }\n\t\n\t    GlobeViewContainer.prototype.componentDidMount = function componentDidMount() {\n\t        var _this2 = this;\n\t\n\t        setTimeout(function () {\n\t            var storedMap = JSON.parse(_Utilities2.default.getStorageData(\"globeMap\"));\n\t            var meteorsData = JSON.parse(_Utilities2.default.getStorageData(\"meteors\"));\n\t            if (!storedMap) {\n\t                _this2.fetchData();\n\t                _this2.fetchDataMeteor();\n\t            } else {\n\t                _this2.setState(function (prevState) {\n\t                    return {\n\t                        globeMap: (0, _topojsonClient.feature)(storedMap, storedMap.objects.countries).features,\n\t                        meteors: meteorsData,\n\t                        isLoading: false\n\t                    };\n\t                });\n\t            }\n\t        }, 2500);\n\t    };\n\t\n\t    GlobeViewContainer.prototype.fetchDataMeteor = function fetchDataMeteor() {\n\t        var _this3 = this;\n\t\n\t        fetch('https://data.nasa.gov/resource/y77d-th95.geojson').then(function (response) {\n\t            return response.json();\n\t        }).then(function (result) {\n\t            _Utilities2.default.setStorageData(\"meteors\", result);\n\t            _this3.setState({\n\t                meteors: result,\n\t                isLoading: false\n\t            });\n\t        }).catch(function (err) {\n\t            console.log('====================================');\n\t            console.log('error getting the meteors data:' + JSON.stringify(err, null, 2));\n\t            console.log('====================================');\n\t            _this3.setState({ isError: true });\n\t        });\n\t    };\n\t\n\t    GlobeViewContainer.prototype.fetchData = function fetchData() {\n\t        var _this4 = this;\n\t\n\t        fetch('https://d3js.org/world-50m.v1.json').then(function (response) {\n\t            return response.json();\n\t        }).then(function (result) {\n\t\n\t            _Utilities2.default.setStorageData(\"globeMap\", result);\n\t            _this4.setState({\n\t\n\t                globeMap: (0, _topojsonClient.feature)(result, result.objects.countries).features\n\t\n\t            });\n\t        }).catch(function (err) {\n\t            console.log('====================================');\n\t            console.log('error getting the chart data:' + JSON.stringify(err, null, 2));\n\t            console.log('====================================');\n\t            _this4.setState({ isError: true });\n\t        });\n\t    };\n\t\n\t    GlobeViewContainer.prototype.render = function render() {\n\t        var _state = this.state,\n\t            isError = _state.isError,\n\t            isLoading = _state.isLoading,\n\t            globeMap = _state.globeMap,\n\t            meteors = _state.meteors,\n\t            isToolTipActive = _state.isToolTipActive,\n\t            meteorInfo = _state.meteorInfo;\n\t\n\t        if (isError) {\n\t            return _react2.default.createElement(\n\t                'div',\n\t                null,\n\t                'Lights up the sirens.....Something went wrong'\n\t            );\n\t        }\n\t        if (isLoading) {\n\t            return _react2.default.createElement(\n\t                'div',\n\t                null,\n\t                'Hold on to your hat...i\\'m getting the data at lightspeed'\n\t            );\n\t        }\n\t        //return (<h3>soom</h3>)\n\t        if (globeMap.length) {\n\t            return _react2.default.createElement(\n\t                'div',\n\t                null,\n\t                _react2.default.createElement(\n\t                    'div',\n\t                    { className: style.globeTitle },\n\t                    'Meteor hits across the globe'\n\t                ),\n\t                _react2.default.createElement(\n\t                    'div',\n\t                    { className: style.containerGlobe },\n\t                    _react2.default.createElement(\n\t                        'div',\n\t                        null,\n\t                        _react2.default.createElement(_GlobeViewChart2.default, {\n\t                            globeData: globeMap,\n\t                            meteorsInfo: meteors.features,\n\t                            showToolTip: this.activateToolTip,\n\t                            hideToolTip: this.disableToolTip })\n\t                    ),\n\t                    _react2.default.createElement(\n\t                        'div',\n\t                        null,\n\t                        _react2.default.createElement(_MeteorToolTip2.default, { data: isToolTipActive ? meteorInfo : null })\n\t                    )\n\t                )\n\t            );\n\t        }\n\t    };\n\t\n\t    return GlobeViewContainer;\n\t}(_react.Component);\n\t\n\texports.default = GlobeViewContainer;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 307:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(2);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar MeteorPoint = function (_PureComponent) {\n\t    _inherits(MeteorPoint, _PureComponent);\n\t\n\t    function MeteorPoint() {\n\t        var _temp, _this, _ret;\n\t\n\t        _classCallCheck(this, MeteorPoint);\n\t\n\t        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t            args[_key] = arguments[_key];\n\t        }\n\t\n\t        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.calculateRadius = function (value) {\n\t            var range = 179687.5;\n\t            // console.log('====================================');\n\t            // console.log(\"range: \"+range+\" value:\"+ value);\n\t            // console.log('====================================');\n\t            if (value <= range) {\n\t                // console.log('====================================');\n\t                // console.log(`(value<=range`);\n\t                // console.log('====================================');\n\t                return 2;\n\t            } else if (value <= range * 2) {\n\t                // console.log('====================================');\n\t                // console.log(`(value<=range*2)`);\n\t                // console.log('====================================');\n\t                //return 10;\n\t                return 4;\n\t            } else if (value <= range * 3) {\n\t                // console.log('====================================');\n\t                // console.log(`(value<=range*3`);\n\t                // console.log('====================================');\n\t                return 6;\n\t            } else if (value <= range * 20) {\n\t                // console.log('====================================');\n\t                // console.log(`(value<=range*20)`);\n\t                // console.log('====================================');\n\t                return 8;\n\t            } else if (value <= range * 100) {\n\t                // console.log('====================================');\n\t                // console.log(`(value<=range*100)`);\n\t                // console.log('====================================');\n\t                return 10;\n\t            }\n\t            // console.log('====================================');\n\t            // console.log(`(50)`);\n\t            // console.log('====================================');\n\t            return 12;\n\t        }, _this.onEnter = function () {\n\t            var _this$props = _this.props,\n\t                meteorPointEnter = _this$props.meteorPointEnter,\n\t                data = _this$props.data,\n\t                mass = _this$props.mass,\n\t                rectangleLat = _this$props.rectangleLat,\n\t                rectangleLong = _this$props.rectangleLong;\n\t\n\t            meteorPointEnter({\n\t                name: data.meteorname,\n\t                meteorclass: data.meteorclass,\n\t                dateofhit: data.datefell,\n\t                meteormass: mass,\n\t                latitude: rectangleLat,\n\t                longitude: rectangleLong\n\t            });\n\t        }, _this.onExit = function () {\n\t            var meteorPointExit = _this.props.meteorPointExit;\n\t\n\t            meteorPointExit();\n\t        }, _temp), _possibleConstructorReturn(_this, _ret);\n\t    }\n\t\n\t    MeteorPoint.prototype.render = function render() {\n\t        var _props = this.props,\n\t            mass = _props.mass,\n\t            rectangleLat = _props.rectangleLat,\n\t            rectangleLong = _props.rectangleLong,\n\t            circleId = _props.circleId;\n\t\n\t        return _react2.default.createElement('circle', { key: 'marker_' + circleId + ' ',\n\t            fill: '#E91E63',\n\t            fillOpacity: mass <= 179687.5 ? 1 : 0.5,\n\t            stroke: '#FFFFFF',\n\t            className: 'marker',\n\t            cx: rectangleLat,\n\t            cy: rectangleLong,\n\t            r: this.calculateRadius(mass),\n\t            onMouseOver: this.onEnter,\n\t            onMouseOut: this.onExit });\n\t    };\n\t\n\t    return MeteorPoint;\n\t}(_react.PureComponent);\n\t\n\tMeteorPoint.propTypes = {\n\t    data: _propTypes2.default.shape({\n\t        meteorname: _propTypes2.default.string,\n\t        meteorclass: _propTypes2.default.string,\n\t        datefell: _propTypes2.default.string\n\t    }),\n\t    mass: _propTypes2.default.number,\n\t    rectangleLat: _propTypes2.default.number,\n\t    rectangleLong: _propTypes2.default.number,\n\t    circleId: _propTypes2.default.number,\n\t    meteorPointEnter: _propTypes2.default.func,\n\t    meteorPointExit: _propTypes2.default.func\n\t};\n\texports.default = MeteorPoint;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 308:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(2);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar showMeteorInfo = function showMeteorInfo() {\n\t    return _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        _react2.default.createElement(\n\t            'div',\n\t            { className: 'tooltipText' },\n\t            'Mouse over map',\n\t            _react2.default.createElement('br', null),\n\t            'to show information'\n\t        )\n\t    );\n\t};\n\tvar showMeteorData = function showMeteorData(value) {\n\t    return _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        _react2.default.createElement(\n\t            'div',\n\t            { className: 'tooltipText' },\n\t            value.dateofhit\n\t        ),\n\t        _react2.default.createElement(\n\t            'div',\n\t            { className: 'tooltipText' },\n\t            'meteor with mass of ',\n\t            value.meteormass,\n\t            ' '\n\t        ),\n\t        _react2.default.createElement(\n\t            'div',\n\t            { className: 'tooltipText' },\n\t            'and class ',\n\t            value.meteorclass\n\t        ),\n\t        _react2.default.createElement(\n\t            'div',\n\t            { className: 'tooltipText' },\n\t            'fell on latitude ',\n\t            value.latitude,\n\t            ' '\n\t        ),\n\t        _react2.default.createElement(\n\t            'div',\n\t            { className: 'tooltipText' },\n\t            'and longitude:',\n\t            value.longitude\n\t        )\n\t    );\n\t};\n\t\n\tvar MeteorToolTip = function MeteorToolTip(_ref) {\n\t    var data = _ref.data;\n\t\n\t\n\t    return _react2.default.createElement(\n\t        'div',\n\t        { className: 'containerToolTip' },\n\t        data ? showMeteorData(data) : showMeteorInfo()\n\t    );\n\t};\n\tMeteorToolTip.propTypes = {\n\t\n\t    data: _propTypes2.default.shape({\n\t        name: _propTypes2.default.string,\n\t        meteorclass: _propTypes2.default.string,\n\t        dateofhit: _propTypes2.default.string,\n\t        meteormass: _propTypes2.default.number,\n\t        latitude: _propTypes2.default.number,\n\t        longitude: _propTypes2.default.number\n\t    })\n\t};\n\texports.default = MeteorToolTip;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 309:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(2);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _d3Geo = __webpack_require__(379);\n\t\n\tvar _MeteorPoint = __webpack_require__(307);\n\t\n\tvar _MeteorPoint2 = _interopRequireDefault(_MeteorPoint);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar WorldMap = function (_Component) {\n\t    _inherits(WorldMap, _Component);\n\t\n\t    function WorldMap() {\n\t        var _temp, _this, _ret;\n\t\n\t        _classCallCheck(this, WorldMap);\n\t\n\t        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t            args[_key] = arguments[_key];\n\t        }\n\t\n\t        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onPointHover = function (value) {\n\t            console.log('====================================');\n\t            console.log('onPointHover value:' + JSON.stringify(value, null, 2));\n\t            console.log('====================================');\n\t            var pointEnter = _this.props.pointEnter;\n\t\n\t            pointEnter(value);\n\t        }, _this.onPointLeave = function () {\n\t            var pointExit = _this.props.pointExit;\n\t\n\t            pointExit();\n\t        }, _temp), _possibleConstructorReturn(_this, _ret);\n\t    }\n\t\n\t    WorldMap.prototype.project = function project() {\n\t        var _props = this.props,\n\t            width = _props.width,\n\t            height = _props.height;\n\t\n\t        return (0, _d3Geo.geoMercator)().scale(100).translate([width / 2, height / 2]);\n\t    };\n\t\n\t    WorldMap.prototype.render = function render() {\n\t        var _this2 = this;\n\t\n\t        var _props2 = this.props,\n\t            world = _props2.world,\n\t            meteorfall = _props2.meteorfall,\n\t            width = _props2.width,\n\t            height = _props2.height;\n\t\n\t        var parsedWorld = world.map(function (d, i) {\n\t            return _react2.default.createElement('path', { key: 'path_' + i, d: (0, _d3Geo.geoPath)().projection(_this2.project())(d),\n\t                fill: 'rgba(38,50,56,' + 1 / world.length * i + ')', stroke: '#FFFFFF', strokeWidth: 0.5 });\n\t        });\n\t        var meteorsData = meteorfall.map(function (m, i) {\n\t            return _react2.default.createElement(_MeteorPoint2.default, { key: 'mpoint_' + i,\n\t                data: {\n\t                    meteorname: m.properties.name,\n\t                    meteorclass: m.properties.recclass,\n\t                    datefell: m.properties.year\n\t                },\n\t                mass: parseInt(m.properties.mass),\n\t                rectangleLat: _this2.project()([Number(m.properties.reclong), Number(m.properties.reclat)])[0],\n\t                rectangleLong: _this2.project()([Number(m.properties.reclong), Number(m.properties.reclat)])[1],\n\t                circleId: i, meteorPointEnter: _this2.onPointHover,\n\t                meteorPointExit: _this2.onPointLeave });\n\t        });\n\t        return _react2.default.createElement(\n\t            'g',\n\t            null,\n\t            parsedWorld,\n\t            meteorsData\n\t        );\n\t    };\n\t\n\t    return WorldMap;\n\t}(_react.Component);\n\t\n\tWorldMap.propTypes = {\n\t    width: _propTypes2.default.number,\n\t    height: _propTypes2.default.number\n\t};\n\texports.default = WorldMap;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 389:\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\tmodule.exports = {\"containerGlobe\":\"src-components-Challenges-GlobeChartView----globe-style-module---containerGlobe---3awqv\",\"globeTitle\":\"src-components-Challenges-GlobeChartView----globe-style-module---globeTitle---clqfa\",\"tooltipText\":\"src-components-Challenges-GlobeChartView----globe-style-module---tooltipText---1ZgBU\"};\n\n/***/ }),\n\n/***/ 329:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _GloveViewContainer = __webpack_require__(306);\n\t\n\tvar _GloveViewContainer2 = _interopRequireDefault(_GloveViewContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar GlobeGraphPage = function GlobeGraphPage() {\n\t    return _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        _react2.default.createElement(_GloveViewContainer2.default, null)\n\t    );\n\t};\n\texports.default = GlobeGraphPage;\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-globeview-js-d81c54cac17ac8358146.js","// https://d3js.org/d3-geo/ Version 1.9.1. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\n\t(factory((global.d3 = global.d3 || {}),global.d3));\n}(this, (function (exports,d3Array) { 'use strict';\n\n// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nvar adder = function() {\n  return new Adder;\n};\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n\nvar epsilon = 1e-6;\nvar epsilon2 = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar quarterPi = pi / 4;\nvar tau = pi * 2;\n\nvar degrees = 180 / pi;\nvar radians = pi / 180;\n\nvar abs = Math.abs;\nvar atan = Math.atan;\nvar atan2 = Math.atan2;\nvar cos = Math.cos;\nvar ceil = Math.ceil;\nvar exp = Math.exp;\n\nvar log = Math.log;\nvar pow = Math.pow;\nvar sin = Math.sin;\nvar sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nvar sqrt = Math.sqrt;\nvar tan = Math.tan;\n\nfunction acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nfunction asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nfunction haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n\nfunction noop() {}\n\nfunction streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nvar geoStream = function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n};\n\nvar areaRingSum = adder();\n\nvar areaSum = adder();\nvar lambda00;\nvar phi00;\nvar lambda0;\nvar cosPhi0;\nvar sinPhi0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nvar area = function(object) {\n  areaSum.reset();\n  geoStream(object, areaStream);\n  return areaSum * 2;\n};\n\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nfunction cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nfunction cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nfunction cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nfunction cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nfunction cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nfunction cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n\nvar lambda0$1;\nvar phi0;\nvar lambda1;\nvar phi1;\nvar lambda2;\nvar lambda00$1;\nvar phi00$1;\nvar p0;\nvar deltaSum = adder();\nvar ranges;\nvar range$1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign$$1 = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign$$1,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0$1) {\n        if (lambda < lambda0$1) lambda0$1 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range$1[0] = lambda0$1, range$1[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00$1 = lambda, phi00$1 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00$1, phi00$1);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);\n  range$1[0] = lambda0$1, range$1[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range$$1, x) {\n  return range$$1[0] <= range$$1[1] ? range$$1[0] <= x && x <= range$$1[1] : x < range$$1[0] || range$$1[1] < x;\n}\n\nvar bounds = function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n  ranges = [];\n  geoStream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range$1 = null;\n\n  return lambda0$1 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0$1, phi0], [lambda1, phi1]];\n};\n\nvar W0;\nvar W1;\nvar X0;\nvar Y0;\nvar Z0;\nvar X1;\nvar Y1;\nvar Z1;\nvar X2;\nvar Y2;\nvar Z2;\nvar lambda00$2;\nvar phi00$2;\nvar x0;\nvar y0;\nvar z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00$2, phi00$2);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00$2 = lambda, phi00$2 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nvar centroid = function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  geoStream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n};\n\nvar constant = function(x) {\n  return function() {\n    return x;\n  };\n};\n\nvar compose = function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n};\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nfunction rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nvar rotation = function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n};\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nfunction circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nvar circle = function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n};\n\nvar clipBuffer = function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n};\n\nvar pointEqual = function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n};\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nvar clipRejoin = function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n};\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n\nvar sum = adder();\n\nvar polygonContains = function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign$$1 = delta >= 0 ? 1 : -1,\n          absDelta = sign$$1 * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign$$1 * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n};\n\nvar clip = function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = d3Array.merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n};\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n\nvar clipAntimeridian = clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n\nvar clipCircle = function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n};\n\nvar clipLine = function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n};\n\nvar clipMax = 1e9;\nvar clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nfunction clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = d3Array.merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nvar extent = function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n};\n\nvar lengthSum = adder();\nvar lambda0$2;\nvar sinPhi0$1;\nvar cosPhi0$1;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0$2),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n}\n\nvar length = function(object) {\n  lengthSum.reset();\n  geoStream(object, lengthStream);\n  return +lengthSum;\n};\n\nvar coordinates = [null, null];\nvar object = {type: \"LineString\", coordinates: coordinates};\n\nvar distance = function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n};\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nvar contains = function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n};\n\nfunction graticuleX(y0, y1, dy) {\n  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nfunction graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nfunction graticule10() {\n  return graticule()();\n}\n\nvar interpolate = function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n};\n\nvar identity = function(x) {\n  return x;\n};\n\nvar areaSum$1 = adder();\nvar areaRingSum$1 = adder();\nvar x00;\nvar y00;\nvar x0$1;\nvar y0$1;\n\nvar areaStream$1 = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream$1.lineStart = areaRingStart$1;\n    areaStream$1.lineEnd = areaRingEnd$1;\n  },\n  polygonEnd: function() {\n    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;\n    areaSum$1.add(abs(areaRingSum$1));\n    areaRingSum$1.reset();\n  },\n  result: function() {\n    var area = areaSum$1 / 2;\n    areaSum$1.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart$1() {\n  areaStream$1.point = areaPointFirst$1;\n}\n\nfunction areaPointFirst$1(x, y) {\n  areaStream$1.point = areaPoint$1;\n  x00 = x0$1 = x, y00 = y0$1 = y;\n}\n\nfunction areaPoint$1(x, y) {\n  areaRingSum$1.add(y0$1 * x - x0$1 * y);\n  x0$1 = x, y0$1 = y;\n}\n\nfunction areaRingEnd$1() {\n  areaPoint$1(x00, y00);\n}\n\nvar x0$2 = Infinity;\nvar y0$2 = x0$2;\nvar x1 = -x0$2;\nvar y1 = x1;\n\nvar boundsStream$1 = {\n  point: boundsPoint$1,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0$2, y0$2], [x1, y1]];\n    x1 = y1 = -(y0$2 = x0$2 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint$1(x, y) {\n  if (x < x0$2) x0$2 = x;\n  if (x > x1) x1 = x;\n  if (y < y0$2) y0$2 = y;\n  if (y > y1) y1 = y;\n}\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0$1 = 0;\nvar Y0$1 = 0;\nvar Z0$1 = 0;\nvar X1$1 = 0;\nvar Y1$1 = 0;\nvar Z1$1 = 0;\nvar X2$1 = 0;\nvar Y2$1 = 0;\nvar Z2$1 = 0;\nvar x00$1;\nvar y00$1;\nvar x0$3;\nvar y0$3;\n\nvar centroidStream$1 = {\n  point: centroidPoint$1,\n  lineStart: centroidLineStart$1,\n  lineEnd: centroidLineEnd$1,\n  polygonStart: function() {\n    centroidStream$1.lineStart = centroidRingStart$1;\n    centroidStream$1.lineEnd = centroidRingEnd$1;\n  },\n  polygonEnd: function() {\n    centroidStream$1.point = centroidPoint$1;\n    centroidStream$1.lineStart = centroidLineStart$1;\n    centroidStream$1.lineEnd = centroidLineEnd$1;\n  },\n  result: function() {\n    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n        : [NaN, NaN];\n    X0$1 = Y0$1 = Z0$1 =\n    X1$1 = Y1$1 = Z1$1 =\n    X2$1 = Y2$1 = Z2$1 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint$1(x, y) {\n  X0$1 += x;\n  Y0$1 += y;\n  ++Z0$1;\n}\n\nfunction centroidLineStart$1() {\n  centroidStream$1.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream$1.point = centroidPointLine;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);\n  X1$1 += z * (x0$3 + x) / 2;\n  Y1$1 += z * (y0$3 + y) / 2;\n  Z1$1 += z;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction centroidLineEnd$1() {\n  centroidStream$1.point = centroidPoint$1;\n}\n\nfunction centroidRingStart$1() {\n  centroidStream$1.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd$1() {\n  centroidPointRing(x00$1, y00$1);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream$1.point = centroidPointRing;\n  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0$3,\n      dy = y - y0$3,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1$1 += z * (x0$3 + x) / 2;\n  Y1$1 += z * (y0$3 + y) / 2;\n  Z1$1 += z;\n\n  z = y0$3 * x - x0$3 * y;\n  X2$1 += z * (x0$3 + x);\n  Y2$1 += z * (y0$3 + y);\n  Z2$1 += z * 3;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n\nvar lengthSum$1 = adder();\nvar lengthRing;\nvar x00$2;\nvar y00$2;\nvar x0$4;\nvar y0$4;\n\nvar lengthStream$1 = {\n  point: noop,\n  lineStart: function() {\n    lengthStream$1.point = lengthPointFirst$1;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint$1(x00$2, y00$2);\n    lengthStream$1.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum$1;\n    lengthSum$1.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst$1(x, y) {\n  lengthStream$1.point = lengthPoint$1;\n  x00$2 = x0$4 = x, y00$2 = y0$4 = y;\n}\n\nfunction lengthPoint$1(x, y) {\n  x0$4 -= x, y0$4 -= y;\n  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));\n  x0$4 = x, y0$4 = y;\n}\n\nfunction PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle$1(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle$1(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle$1(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n\nvar index = function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      geoStream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    geoStream(object, projectionStream(areaStream$1));\n    return areaStream$1.result();\n  };\n\n  path.measure = function(object) {\n    geoStream(object, projectionStream(lengthStream$1));\n    return lengthStream$1.result();\n  };\n\n  path.bounds = function(object) {\n    geoStream(object, projectionStream(boundsStream$1));\n    return boundsStream$1.result();\n  };\n\n  path.centroid = function(object) {\n    geoStream(object, projectionStream(centroidStream$1));\n    return centroidStream$1.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n};\n\nvar transform = function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n};\n\nfunction transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream$1));\n  fitBounds(boundsStream$1.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nfunction fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nfunction fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nfunction fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nfunction fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nvar maxDepth = 16;\nvar cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nvar resample = function(project, delta2) {\n  return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n};\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample$1(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nfunction projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n\nfunction conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n\nfunction cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nfunction conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nvar conicEqualArea = function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n};\n\nvar albers = function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n};\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nvar albersUsa = function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null, (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n};\n\nfunction azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nfunction azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n\nvar azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nvar azimuthalEqualArea = function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n};\n\nvar azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nvar azimuthalEquidistant = function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n};\n\nfunction mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nvar mercator = function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n};\n\nfunction mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nfunction conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nvar conicConformal = function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n};\n\nfunction equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nvar equirectangular = function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n};\n\nfunction conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nvar conicEquidistant = function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n};\n\nfunction gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nvar gnomonic = function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n};\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nvar identity$1 = function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, // clip extent\n      postclip = identity,\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform$$1(postclip(cacheStream = stream));\n    },\n    postclip: function(_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform$$1 = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform$$1 = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    },\n    fitWidth: function(width, object) {\n      return fitWidth(projection, width, object);\n    },\n    fitHeight: function(height, object) {\n      return fitHeight(projection, height, object);\n    }\n  };\n};\n\nfunction naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nvar naturalEarth1 = function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n};\n\nfunction orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nvar orthographic = function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n};\n\nfunction stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nvar stereographic = function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n};\n\nfunction transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nvar transverseMercator = function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n};\n\nexports.geoArea = area;\nexports.geoBounds = bounds;\nexports.geoCentroid = centroid;\nexports.geoCircle = circle;\nexports.geoClipAntimeridian = clipAntimeridian;\nexports.geoClipCircle = clipCircle;\nexports.geoClipExtent = extent;\nexports.geoClipRectangle = clipRectangle;\nexports.geoContains = contains;\nexports.geoDistance = distance;\nexports.geoGraticule = graticule;\nexports.geoGraticule10 = graticule10;\nexports.geoInterpolate = interpolate;\nexports.geoLength = length;\nexports.geoPath = index;\nexports.geoAlbers = albers;\nexports.geoAlbersUsa = albersUsa;\nexports.geoAzimuthalEqualArea = azimuthalEqualArea;\nexports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\nexports.geoAzimuthalEquidistant = azimuthalEquidistant;\nexports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\nexports.geoConicConformal = conicConformal;\nexports.geoConicConformalRaw = conicConformalRaw;\nexports.geoConicEqualArea = conicEqualArea;\nexports.geoConicEqualAreaRaw = conicEqualAreaRaw;\nexports.geoConicEquidistant = conicEquidistant;\nexports.geoConicEquidistantRaw = conicEquidistantRaw;\nexports.geoEquirectangular = equirectangular;\nexports.geoEquirectangularRaw = equirectangularRaw;\nexports.geoGnomonic = gnomonic;\nexports.geoGnomonicRaw = gnomonicRaw;\nexports.geoIdentity = identity$1;\nexports.geoProjection = projection;\nexports.geoProjectionMutator = projectionMutator;\nexports.geoMercator = mercator;\nexports.geoMercatorRaw = mercatorRaw;\nexports.geoNaturalEarth1 = naturalEarth1;\nexports.geoNaturalEarth1Raw = naturalEarth1Raw;\nexports.geoOrthographic = orthographic;\nexports.geoOrthographicRaw = orthographicRaw;\nexports.geoStereographic = stereographic;\nexports.geoStereographicRaw = stereographicRaw;\nexports.geoTransverseMercator = transverseMercator;\nexports.geoTransverseMercatorRaw = transverseMercatorRaw;\nexports.geoRotation = rotation;\nexports.geoStream = geoStream;\nexports.geoTransform = transform;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/d3-geo/build/d3-geo.js\n// module id = 379\n// module chunks = 234182462816062","// https://github.com/topojson/topojson-client Version 3.0.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.topojson = global.topojson || {})));\n}(this, (function (exports) { 'use strict';\n\nvar identity = function(x) {\n  return x;\n};\n\nvar transform = function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n};\n\nvar bbox = function(topology) {\n  var t = transform(topology.transform), key,\n      x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\n  function bboxPoint(p) {\n    p = t(p);\n    if (p[0] < x0) x0 = p[0];\n    if (p[0] > x1) x1 = p[0];\n    if (p[1] < y0) y0 = p[1];\n    if (p[1] > y1) y1 = p[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n      case \"Point\": bboxPoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n    }\n  }\n\n  topology.arcs.forEach(function(arc) {\n    var i = -1, n = arc.length, p;\n    while (++i < n) {\n      p = t(arc[i], i);\n      if (p[0] < x0) x0 = p[0];\n      if (p[0] > x1) x1 = p[0];\n      if (p[1] < y0) y0 = p[1];\n      if (p[1] > y1) y1 = p[1];\n    }\n  });\n\n  for (key in topology.objects) {\n    bboxGeometry(topology.objects[key]);\n  }\n\n  return [x0, y0, x1, y1];\n};\n\nvar reverse = function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n};\n\nvar feature = function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature$1(topology, o); })}\n      : feature$1(topology, o);\n};\n\nfunction feature$1(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nfunction object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n\nvar stitch = function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n};\n\nvar mesh = function(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n};\n\nfunction meshArcs(topology, object$$1, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object$$1, filter);\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n}\n\nfunction extractArcs(topology, object$$1, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"LineString\": extract1(o.arcs); break;\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n      case \"MultiPolygon\": extract3(o.arcs); break;\n    }\n  }\n\n  geometry(object$$1);\n\n  geomsByArc.forEach(filter == null\n      ? function(geoms) { arcs.push(geoms[0].i); }\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n  return arcs;\n}\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nvar merge = function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n};\n\nfunction mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n\nvar bisect = function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n};\n\nvar neighbors = function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n};\n\nvar untransform = function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2,\n        n = input.length,\n        output = new Array(n),\n        x1 = Math.round((input[0] - dx) / kx),\n        y1 = Math.round((input[1] - dy) / ky);\n    output[0] = x1 - x0, x0 = x1;\n    output[1] = y1 - y0, y0 = y1;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n};\n\nvar quantize = function(topology, transform) {\n  if (topology.transform) throw new Error(\"already quantized\");\n\n  if (!transform || !transform.scale) {\n    if (!((n = Math.floor(transform)) >= 2)) throw new Error(\"n must be ≥2\");\n    box = topology.bbox || bbox(topology);\n    var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;\n    transform = {scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0]};\n  } else {\n    box = topology.bbox;\n  }\n\n  var t = untransform(transform), box, key, inputs = topology.objects, outputs = {};\n\n  function quantizePoint(point) {\n    return t(point);\n  }\n\n  function quantizeGeometry(input) {\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\n      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\n      case \"MultiPoint\": output = {type: \"MultiPoint\", coordinates: input.coordinates.map(quantizePoint)}; break;\n      default: return input;\n    }\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function quantizeArc(input) {\n    var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic\n    output[0] = t(input[0], 0);\n    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points\n    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points\n    output.length = j;\n    return output;\n  }\n\n  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);\n\n  return {\n    type: \"Topology\",\n    bbox: box,\n    transform: transform,\n    objects: outputs,\n    arcs: topology.arcs.map(quantizeArc)\n  };\n};\n\nexports.bbox = bbox;\nexports.feature = feature;\nexports.mesh = mesh;\nexports.meshArcs = meshArcs;\nexports.merge = merge;\nexports.mergeArcs = mergeArcs;\nexports.neighbors = neighbors;\nexports.quantize = quantize;\nexports.transform = transform;\nexports.untransform = untransform;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/topojson-client/dist/topojson-client.js\n// module id = 555\n// module chunks = 234182462816062","import React,{Component} from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport WorldMap from './WorldMap';\r\n\r\nclass GlobeViewChart extends Component{\r\n\r\n    showToolTipInfo=value=>{\r\n        const {showToolTip}= this.props;\r\n        showToolTip(value);\r\n    }\r\n    hideToolTipInfo=()=>{\r\n        const {hideToolTip}= this.props;\r\n        hideToolTip();\r\n    }\r\n    render(){\r\n        const {globeData,meteorsInfo}= this.props;\r\n        const svgDimensions={\r\n            width:820,\r\n            height:550\r\n        }\r\n        return (\r\n            <svg width={svgDimensions.width} height={svgDimensions.height} viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}>\r\n                <WorldMap width={svgDimensions.width} \r\n                    height={svgDimensions.height}\r\n                    world={globeData} meteorfall={meteorsInfo}\r\n                    pointEnter={this.showToolTipInfo}\r\n                    pointExit={this.hideToolTipInfo}\r\n                    />\r\n            </svg>\r\n        )\r\n    }\r\n}\r\nGlobeViewChart.propTypes={\r\n    //globeData:PropTypes.obj\r\n}\r\nexport default GlobeViewChart;\n\n\n// WEBPACK FOOTER //\n// ./src/components/Challenges/GlobeChartView/GlobeViewChart.js","import React, { Component } from 'react';\r\nimport { feature } from \"topojson-client\";\r\nimport GlobeViewChart from './GlobeViewChart';\r\nimport MeteorToolTip from './MeteorToolTip';\r\nimport Utilities from '../../../Utils/Utilities';\r\nimport '../../../Assets/css/globe.css';\r\nimport styles from './globe-style.module.css';\r\nclass GlobeViewContainer extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            isLoading:true,\r\n            isError:false,\r\n            meteors:{},\r\n            globeMap:[],\r\n            isToolTipActive:false,\r\n            meteorInfo:{}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        \r\n        setTimeout(() => {\r\n            const storedMap=JSON.parse(Utilities.getStorageData(\"globeMap\"));\r\n            const meteorsData=JSON.parse(Utilities.getStorageData(\"meteors\"));\r\n            if (!storedMap){\r\n                this.fetchData();\r\n                this.fetchDataMeteor();\r\n            }\r\n            else{\r\n                this.setState(prevState=>({\r\n                    globeMap:feature(storedMap,storedMap.objects.countries).features,\r\n                    meteors:meteorsData,\r\n                    isLoading:false\r\n                }));\r\n            }\r\n        }, 2500);\r\n\r\n    }\r\n    fetchDataMeteor(){\r\n        fetch('https://data.nasa.gov/resource/y77d-th95.geojson')\r\n            .then(response=>{return response.json()})\r\n            .then(result=>{\r\n                Utilities.setStorageData(\"meteors\",result);\r\n                this.setState({\r\n                    meteors:result,\r\n                    isLoading:false\r\n                });\r\n            })\r\n            .catch(err=>{\r\n                console.log('====================================');\r\n                console.log(`error getting the meteors data:${JSON.stringify(err,null,2)}`);\r\n                console.log('====================================');\r\n                this.setState({isError:true});\r\n            })\r\n    }\r\n    fetchData(){\r\n        fetch('https://d3js.org/world-50m.v1.json')\r\n            .then(response=>{\r\n                return response.json();\r\n            })\r\n            .then(result=>{\r\n\r\n                Utilities.setStorageData(\"globeMap\",result);\r\n                this.setState({\r\n                    \r\n                    globeMap:feature(result,result.objects.countries).features\r\n                    \r\n                });\r\n            })\r\n            .catch(err=>{\r\n                console.log('====================================');\r\n                console.log(`error getting the chart data:${JSON.stringify(err,null,2)}`);\r\n                console.log('====================================');\r\n                this.setState({isError:true});\r\n            })\r\n    }\r\n   \r\n    activateToolTip=value=>{\r\n        this.setState({isToolTipActive:true,meteorInfo:value});\r\n    }\r\n    disableToolTip=()=>{\r\n        this.setState({isToolTipActive:false,meteorInfo:{}});\r\n    }\r\n    render(){\r\n        const {isError,isLoading,globeMap,meteors,isToolTipActive,meteorInfo}= this.state;\r\n        if (isError){\r\n            return (<div>Lights up the sirens.....Something went wrong</div>);\r\n        }\r\n        if (isLoading){\r\n            return (<div>Hold on to your hat...i'm getting the data at lightspeed</div>);\r\n        }\r\n        //return (<h3>soom</h3>)\r\n        if (globeMap.length){\r\n            return (\r\n                <div>\r\n                    <div className={style.globeTitle}>Meteor hits across the globe</div>\r\n                    <div className={style.containerGlobe}>\r\n                        <div>\r\n                            <GlobeViewChart \r\n                                globeData={globeMap} \r\n                                meteorsInfo={meteors.features}\r\n                                showToolTip={this.activateToolTip}\r\n                                hideToolTip={this.disableToolTip}/>\r\n                        </div>\r\n                        <div>\r\n                            <MeteorToolTip data={isToolTipActive?meteorInfo:null}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            )\r\n        }\r\n    }\r\n}\r\nexport default GlobeViewContainer;\n\n\n// WEBPACK FOOTER //\n// ./src/components/Challenges/GlobeChartView/GloveViewContainer.js","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nclass MeteorPoint extends PureComponent{\r\n    \r\n    calculateRadius=value=>{\r\n        let range=179687.5\r\n        // console.log('====================================');\r\n        // console.log(\"range: \"+range+\" value:\"+ value);\r\n        // console.log('====================================');\r\n        if (value<=range){\r\n            // console.log('====================================');\r\n            // console.log(`(value<=range`);\r\n            // console.log('====================================');\r\n            return 2;\r\n        }\r\n        else if (value<=range*2){\r\n            // console.log('====================================');\r\n            // console.log(`(value<=range*2)`);\r\n            // console.log('====================================');\r\n            //return 10;\r\n            return 4;\r\n        }\r\n        else if (value<=range*3){\r\n            // console.log('====================================');\r\n            // console.log(`(value<=range*3`);\r\n            // console.log('====================================');\r\n            return 6;\r\n        }\r\n        else if (value<=range*20){\r\n            // console.log('====================================');\r\n            // console.log(`(value<=range*20)`);\r\n            // console.log('====================================');\r\n            return 8;\r\n        }\r\n        else if (value<=range*100){\r\n            // console.log('====================================');\r\n            // console.log(`(value<=range*100)`);\r\n            // console.log('====================================');\r\n            return 10;\r\n        }\r\n        // console.log('====================================');\r\n        // console.log(`(50)`);\r\n        // console.log('====================================');\r\n        return 12;\r\n    }\r\n    onEnter=()=>{\r\n        const {meteorPointEnter,data,mass,rectangleLat,rectangleLong}= this.props;\r\n        meteorPointEnter(\r\n            {\r\n                name:data.meteorname,\r\n                meteorclass:data.meteorclass,\r\n                dateofhit:data.datefell,\r\n                meteormass:mass,\r\n                latitude:rectangleLat,\r\n                longitude:rectangleLong\r\n            }\r\n        );\r\n    }\r\n    onExit=()=>{\r\n         const {meteorPointExit}= this.props;\r\n        meteorPointExit();\r\n    }\r\n    render(){\r\n        const {mass,rectangleLat,rectangleLong,circleId}= this.props;\r\n        return (\r\n            <circle key={`marker_${circleId} `}\r\n                fill=\"#E91E63\"\r\n                fillOpacity={mass<=179687.5?1:0.5}\r\n                stroke=\"#FFFFFF\"\r\n                className=\"marker\" \r\n                cx={rectangleLat}\r\n                cy={rectangleLong}\r\n                r={this.calculateRadius(mass)}\r\n                onMouseOver={this.onEnter}\r\n                onMouseOut={this.onExit}/>\r\n        )\r\n    }\r\n}\r\nMeteorPoint.propTypes={\r\n    data:PropTypes.shape({\r\n        meteorname:PropTypes.string,\r\n        meteorclass:PropTypes.string,\r\n        datefell:PropTypes.string\r\n    }),\r\n    mass:PropTypes.number,\r\n    rectangleLat:PropTypes.number,\r\n    rectangleLong:PropTypes.number,\r\n    circleId:PropTypes.number,\r\n    meteorPointEnter:PropTypes.func,\r\n    meteorPointExit:PropTypes.func\r\n};\r\nexport default MeteorPoint;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Challenges/GlobeChartView/MeteorPoint.js","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst showMeteorInfo=()=>{\r\n    return(\r\n        <div>\r\n            <div className=\"tooltipText\">\r\n                Mouse over map<br/>to show information\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nconst showMeteorData=value=>{\r\n    return(\r\n        <div>\r\n            \r\n            <div className=\"tooltipText\">\r\n                {value.dateofhit}\r\n                \r\n            </div>\r\n            <div className=\"tooltipText\">meteor with mass of {value.meteormass} </div>\r\n            <div className=\"tooltipText\">and class {value.meteorclass}</div>\r\n            <div className=\"tooltipText\">fell on latitude {value.latitude} </div>\r\n            <div className=\"tooltipText\">and longitude:{value.longitude}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst MeteorToolTip=({data})=>{\r\n\r\n    return(\r\n        <div className=\"containerToolTip\">\r\n            {data?showMeteorData(data):showMeteorInfo()}\r\n        </div>\r\n    );\r\n};\r\nMeteorToolTip.propTypes={\r\n\r\n    data:PropTypes.shape({\r\n        name:PropTypes.string,\r\n        meteorclass:PropTypes.string,\r\n        dateofhit:PropTypes.string,\r\n        meteormass:PropTypes.number,\r\n        latitude:PropTypes.number,\r\n        longitude:PropTypes.number\r\n    })\r\n};\r\nexport default MeteorToolTip;\n\n\n// WEBPACK FOOTER //\n// ./src/components/Challenges/GlobeChartView/MeteorToolTip.js","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport { geoMercator, geoPath } from \"d3-geo\";\r\nimport MeteorPoint from './MeteorPoint';\r\nclass WorldMap extends Component{\r\n    project(){\r\n        const {width,height}= this.props;\r\n        return geoMercator().scale(100).translate([width/2,height/2])\r\n    }\r\n    onPointHover=value=>{\r\n        console.log('====================================');\r\n        console.log(`onPointHover value:${JSON.stringify(value,null,2)}`);\r\n        console.log('====================================');\r\n        const {pointEnter}= this.props;\r\n        pointEnter(value);\r\n    }\r\n    onPointLeave=()=>{\r\n        const {pointExit}= this.props;\r\n        pointExit();\r\n    }\r\n    render(){\r\n        const {world,meteorfall,width,height}= this.props;\r\n        const parsedWorld= (\r\n            world.map((d,i)=><path key={`path_${i}`} d={geoPath().projection(this.project())(d)} \r\n            fill={ `rgba(38,50,56,${1 / world.length * i})` } stroke=\"#FFFFFF\" strokeWidth={0.5}/>,)\r\n        )\r\n        const meteorsData=(\r\n            \r\n            meteorfall.map((m,i)=>\r\n                <MeteorPoint key={`mpoint_${i}`}\r\n                    data={{\r\n                        meteorname:m.properties.name,\r\n                        meteorclass:m.properties.recclass,\r\n                        datefell:m.properties.year\r\n                    }}\r\n                    mass={parseInt(m.properties.mass)}\r\n                    rectangleLat={this.project()([Number(m.properties.reclong),Number(m.properties.reclat)])[0]}\r\n                    rectangleLong={this.project()([Number(m.properties.reclong),Number(m.properties.reclat)])[1]}\r\n                    circleId={i} meteorPointEnter={this.onPointHover}\r\n                    meteorPointExit={this.onPointLeave}/>,\r\n            )\r\n        )\r\n        return(\r\n            <g>\r\n                {parsedWorld}\r\n                {meteorsData}\r\n            </g>\r\n        )\r\n    }\r\n    \r\n}\r\nWorldMap.propTypes={\r\n    width:PropTypes.number,\r\n    height:PropTypes.number\r\n}\r\nexport default WorldMap;\n\n\n// WEBPACK FOOTER //\n// ./src/components/Challenges/GlobeChartView/WorldMap.js","// removed by extract-text-webpack-plugin\nmodule.exports = {\"containerGlobe\":\"src-components-Challenges-GlobeChartView----globe-style-module---containerGlobe---3awqv\",\"globeTitle\":\"src-components-Challenges-GlobeChartView----globe-style-module---globeTitle---clqfa\",\"tooltipText\":\"src-components-Challenges-GlobeChartView----globe-style-module---tooltipText---1ZgBU\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Challenges/GlobeChartView/globe-style.module.css\n// module id = 389\n// module chunks = 234182462816062","import React from 'react';\r\nimport GlobeViewContainer from '../components/Challenges/GlobeChartView/GloveViewContainer';\r\n\r\nconst GlobeGraphPage=()=>{\r\n    return (\r\n        <div>\r\n            <GlobeViewContainer/>\r\n        </div>\r\n    );\r\n}\r\nexport default GlobeGraphPage;\n\n\n// WEBPACK FOOTER //\n// ./src/pages/globeview.js"],"sourceRoot":""}